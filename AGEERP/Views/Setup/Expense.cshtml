@using AGEERP.Models
@{
    ViewBag.Title = "Expense Head";
}

<div class="card">
    <div class="content-header">

        <div class="card-header">
            <h3 class="card-title">Expense Head</h3>
            <div class="card-tools">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Setup</a></li>
                    <li class="breadcrumb-item active">Expense Head</li>
                </ol>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
                       @(Html.Kendo()
            .Grid<ExpenseVM>()
            .Name("gridExpense")
            .Columns(columns =>
            {
                columns.Bound(c => c.ExpHeadId).Filterable(false).Hidden();
                columns.Bound(c => c.ExpHead).Title("Expense");
                //columns.ForeignKey(c => c.ExpTypeId, (System.Collections.IEnumerable)ViewData["ExpTypeVD"], "ExpTypeId", "ExpType").Title("ExpType");
                columns.Bound(c => c.GLCode);
                columns.ForeignKey(p => p.ExpFor, (System.Collections.IEnumerable)ViewData["ExpenseForVD"], "Value", "Text").Title("Expense For").Width(150);
                columns.ForeignKey(p => p.ExpTypeId, (System.Collections.IEnumerable)ViewData["ExpenseTypeVD"], "ExpTypeId", "ExpType").Title("Expense Type").Width(250);
                columns.Bound(c => c.MaxLimit);

                columns.Command(c => { c.Edit(); c.Destroy(); }).Width(250);
            })
            .Pageable()
            .Sortable()
            .Scrollable()
            .ToolBar(t => { t.Create(); t.Search(); })
            .Search(s => { s.Field(a => a.ExpHead); s.Field(a => a.GLCode); s.Field(a => a.MaxLimit); })
            .Editable(e => e.Mode(GridEditMode.InLine))
            .HtmlAttributes(new { style = "height:400px;" })
            .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .Events(e => e.Error("error_handler"))
            .Model(model =>
            {
                model.Id(m => m.ExpHeadId);
            })
            .Read(read => read.Action("Expense_Read", "Setup"))
            .Create(create => create.Action("Expense_Create", "Setup"))
            .Update(update => update.Action("Expense_Update", "Setup"))
            .Destroy(update => update.Action("Expense_Destroy", "Setup"))
            ))
        </div>

    </div>
</div>


<script type="text/javascript">
    var gridElement = $("#gridExpense");
    $(document).ready(function () {
        resizeGrid();
        //$('#m_10000000').addClass('active');
        //$('#d_10000000').css("display", "block");
        //$('#m_10050000').addClass('active');
        //$('#a_10050000').addClass('active');
    })

    function resizeGrid() {
        var height = $(window).innerHeight() - $('header').innerHeight() - 180;
        if (height < 200) {
            height = 200;
        }
        else if (height > 910) {
            height = 910;
        }
        $("#gridExpense").css("height", height);
        gridElement.data("kendoGrid").resize();
    }

    $(window).resize(function () {
        resizeGrid();
    });
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            var dia = $("#msgBox").data("kendoDialog");
            dia.title("Error");
            dia.content(message);
            dia.open();
        }
    }
</script>
