@using AGEERP.Models
@{
    ViewBag.Title = "Dashboard Inter Stock Transfer";
}
<style>
    .modal {
        position: fixed;
        right: 0;
        left: 0;
        display: none;
        overflow-y: auto;
        width: 78%;
        max-height: 80%;
        margin: auto;
        padding: 0;
        border-radius: 2px;
        background-color: #fafafa;
        will-change: top, opacity;
    }
</style>
<div class="card">
    <div class="content-header">
        <div class="card-header">
            <h3 class="card-title">Dashboard Inter Stock Transfer</h3>
            <div class="card-tools">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/Home/Index">Home</a></li>
                    <li class="breadcrumb-item active">Dashboard Inter Stock Transfer</li>
                </ol>
            </div>
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-xs-12">
        <div class="row">
            <div class="col-md-3">
                @Html.Label("From Date")
                @Html.Kendo().DatePicker().Name("FromDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-md-3">
                @Html.Label("To Date")
                @Html.Kendo().DatePicker().Name("ToDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-md-3">
                @Html.Label("Location")
                @(Html.Kendo()
                        .MultiColumnComboBox()
                    .Name("LocId")
                    .Placeholder("Select Locations ...")
                    .DataValueField("LocId")
                    .DataTextField("LocName")
                    .SelectedIndex(0)
                    .Columns(columns =>
                    {
                        columns.Add().Field("LocCode").Width("100px");
                        columns.Add().Field("LocName").Width("200px");
                    })
                    .FilterFields(new string[] { "LocCode", "LocName" })
                    .Filter(FilterType.Contains)
                        .DataSource(ds =>
                        {
                            ds.Read(read => read.Action("LocationList", "Setup"));
                        })
                        .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>
            <div class="col-md-3 col-sm-4">
                @Html.Label("Status")
                @(Html.Kendo().DropDownList()
                    .Name("Sta")
                    .SelectedIndex(0)
                    .BindTo(new List<SelectListItem>() {
                    new SelectListItem() {
                    Text = "All",
                    Value = "All"
                    },
                    new SelectListItem() {
                    Text = "InTransit",
                    Value = "I"
                    },
                    new SelectListItem() {
                    Text = "Received",
                    Value = "R"
                    }
                    }).HtmlAttributes(new { @style = "width:100%", @required = "true" }))
            </div>
            <div class="col-md-3">
                <br />
                <button class="k-button margin-10" type="button" onclick="ShowDashboardIBStock()">
                    <i class="fas fa-print"></i>&nbsp; Show
                </button>
            </div>

        </div>
        <div class="row">
            @(Html.Kendo()
            .Grid<StockTransferDashboardVM>()
            .Name("gridibstocktransfer")
            .Columns(columns =>
            {
                columns.Template(t => { }).Title("#").ClientTemplate(
                      "#= renderNumber(data) #"
                 ).Width(100);
                columns.Bound(c => c.FromBranch);
                columns.Bound(c => c.ToBranch);
                columns.Bound(c => c.DocNo).ClientTemplate("<a style='text-decoration:underline;cursor:pointer;' onclick='OpenDocument(#:DocNo#)'><i class='fas fa-file'></i>&nbsp #:DocNo#</a>");
                columns.Bound(c => c.DocDate).Format("{0:dd/MM/yyyy}");
                columns.Bound(c => c.Status).ClientTemplate("# if(Status == 'R') " +
                                          "{# <div>Received</div> #} " +
                                          "else if(Status == 'I') {# <div>In Transit</div> #}" +
                                          "else if(Status == 'C') {# <div>Cancelled</div> #}#");
                columns.Bound(c => c.Remarks);
            })
            .Sortable()
            .Pageable()
            .Scrollable()
            //.AutoBind(false)
            .Navigatable()
            .HtmlAttributes(new { style = "height:300px;" })
            .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(100)
            .Model(model =>
            {
                model.Id(m => m.FromBranch);
                model.Id(m => m.ToBranch);
                model.Id(m => m.DocNo);
                model.Id(m => m.DocDate);
                model.Id(m => m.Status);
            })
            .Read(read => read.Action("DashboardIBStockTransfer_read", "Stock").Data("FormatData"))
            ))
        </div>
    </div>
</div>
@Html.Partial("~/Views/Report/_Report.cshtml")
<script>
    $(document).ready(function () {
        //$('#m_18000000').addClass('active');
        //$('#d_18000000').css("display", "block");
        //$('#m_18060000').addClass('active');
        //$('#a_18060000').addClass('active');
        resizeGrid();

    });

    var gridElement = $("#gridibstocktransfer");
    var rowNumber = 0;
    function resetRowNumber(e) {
        rowNumber = 0;
    }
    function OpenDocument(e) {
        $("#rpt").val("StockIssue");
        $("#TransId").val(e);
        $("#rptForm").submit();
    }
    function renderNumber(data) {
        return ++rowNumber;
    }
    function editVisible(dataItem) {
        if (dataItem.ApprovedBy) {
            return false;
        }
        else {
            return dataItem.HasLeaveApprovalRights;
        }

    }
    function ShowDashboardIBStock() {
        $("#gridibstocktransfer").data("kendoGrid").dataSource.read();


    }
    function FormatData() {
        return {
            FromDate: $('#FromDate').val(),
            ToDate: $('#ToDate').val(),
            LocId: $('#LocId').val() || 0,
            Sta: $('#Sta').val() || ""
        }
    }
    function GetDocID() {
        return {
            docid: $('#DocId').val()
        }
    }
    function resizeGrid() {
        var height = $(window).innerHeight() - $('header').innerHeight() - 180;
        if (height < 200) {
            height = 200;
        }
        else if (height > 910) {
            height = 910;
        }
        $("#gridibstocktransfer").css("height", height);
        gridElement.data("kendoGrid").resize();
    }
    //function DeleteDetail(e) {
    //    e.preventDefault();
    //    var grid = this;
    //    var row = $(e.currentTarget).closest("tr");
    //    var data = this.dataItem(row);
    //    data.dirty = true;
    //    grid.dataSource.remove(data);
    //    grid.dataSource.sync();
    //}

    $(window).resize(function () {
        resizeGrid();
    });

</script>

