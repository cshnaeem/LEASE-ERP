@using AGEERP.Models
@{
    ViewBag.Title = "POI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .k-grid-header .k-header .k-link, .k-grid-header .k-header, .k-grid-header .k-link, .k-grid-header .k-link:link, .k-pager-info, .k-scheduler-header, .k-scheduler-agendaview .k-scheduler-datecolumn {
        font-size: 12px !important;
    }

    .k-button .k-button-icontext .k-grid-Print {
        font-size: 12px !important;
    }
</style>
<div class="card">
    <div class="content-header">
        <div class="card-header">
            <h3 class="card-title">GRN Search</h3>
            <div class="card-tools">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Purchase</a></li>
                    <li class="breadcrumb-item active">GRN Search</li>
                </ol>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row ">
            <div class="col-md-3 col-sm-3">
                @Html.Label("Supplier Category")
                @(Html.Kendo()
                .DropDownList()
                .Name("SuppCatId")
                //.Placeholder("All Supplier Category...")
                .SelectedIndex(0)
                .DataValueField("CategoryId")
                .DataTextField("CategoryTitle")
                .Events(e => e.Change("suppCatChange").DataBound("suppCatChange"))
                //.Suggest(true)
                .DataSource(ds =>
                {
                    ds.Read(read => read.Action("SupplierCatList", "Setup"));
                })
                .HtmlAttributes(new { @style = "width:100%;" })
                )
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("Supplier")
                @(Html.Kendo()
                .DropDownList()
                .Name("SuppId")
                .OptionLabel("All Supplier ...")
                //.SelectedIndex(0)
                .DataValueField("SuppId")
                .DataTextField("SuppName")
                .Filter(FilterType.Contains)
                //.Suggest(true)
                .DataSource(ds =>
                {
                    ds.Read(read => read.Action("SupplierByCatList", "Setup").Data("filterSupplier"));
                })
                .HtmlAttributes(new { @style = "width:100%;" })
                )
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("From Date")
                @Html.Kendo().DatePicker().Name("FromDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("To Date")
                @Html.Kendo().DatePicker().Name("ToDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-3">
                @Html.Label("City")
                @(Html.Kendo()
                    .DropDownList()
                    .Name("CityId")
                    .OptionLabel("All")
                    .DataValueField("CityId")
                    .DataTextField("City")
                    .Filter(FilterType.Contains)
                    .Events(e => e.Change("loadLocation"))
                    .DataSource(ds =>
                    {
                    ds.Read(read => read.Action("CityList", "Setup"));
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>
            <div class="col-md-3 col-sm-3" style="margin-top:-6px">
                @Html.Label("Location")
                @(Html.Kendo()
                    .MultiColumnComboBox()
                    .Name("LocId")
                    .Placeholder("All Locations ...")
                    .DataValueField("LocId")
                    .DataTextField("LocName")
                    //.SelectedIndex(0)
                    .Columns(columns =>
                    {
                        columns.Add().Field("LocCode").Width("100px");
                        columns.Add().Field("LocName").Width("200px");
                    })
                    .FilterFields(new string[] { "LocCode", "LocName" })
                    .Filter(FilterType.Contains)
                    .DataSource(ds =>
                    {
                        ds.Read(read => read.Action("LocationByCityList", "Setup").Data("filterLocation"));
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("Status")
                @(Html.Kendo()
                .DropDownList()
                .Name("Status")
                .SelectedIndex(0)
                .BindTo(SelectListVM.GRNStatusSL)
                .HtmlAttributes(new { @style = "width:100%;" })
                )
            </div>
            <div class="col-md-3 col-sm-3">
                <br />
                <button class="k-button margin-10" type="button" onclick="loadGrid()">
                    <i class="fas fa-search"></i>&nbsp; Search
                </button>
            </div>
        </div>
        @*<div class="row">

            </div>*@

    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
            @(Html.Kendo()
            .Grid<GRNInvoiceDetailVM>()
            .Name("gridOrderSearch")
            .Columns(columns =>
            {
                //columns.Bound(c => c.GRNId).Hidden();
                //columns.Bound(c => c.SuppId).Hidden();
                columns.Bound(c => c.GRNNo).Width(130).ClientGroupHeaderTemplate("<b>Branch:</b>&nbsp;#=aggregates.LocCode.max#&nbsp;<b>Supplier:</b>&nbsp;#=aggregates.SuppName.max#&nbsp;<b>PONo:</b>&nbsp;#=aggregates.PONo.max#&nbsp;<b>DONo:</b>&nbsp;#=aggregates.DONo.max#&nbsp;<b>&nbsp;DODate:</b>&nbsp;#=kendo.toString(aggregates.DODate.max,'dd-MM-yyyy')# ");
                columns.Bound(c => c.GRNDate).Format("{0: dd/MM/yyyy}").Width(100);
                columns.Bound(c => c.SKUCode).Width(160);
                columns.Bound(c => c.MRP).Width(70);
                columns.Bound(c => c.RP).Width(70);
                columns.Bound(c => c.TP).Width(70).Title("DP");
                columns.Bound(c => c.Discount).Width(70).Title("Disc");
                columns.Bound(c => c.WHT).Width(70);
                columns.Bound(c => c.GST).Width(70);
                columns.Bound(c => c.NetPrice).Width(70);
                columns.Bound(c => c.Qty).ClientGroupHeaderColumnTemplate("#=sum#").Width(70).ClientFooterTemplate("#=sum#");
                columns.Bound(c => c.Amount).ClientGroupHeaderColumnTemplate("#=sum#").Width(90).ClientFooterTemplate("#=sum#");
                if (ViewBag.InvoiceRights)
                {
                    columns.Bound(c => c.GRNId).Title("").ClientTemplate(" ").ClientGroupHeaderColumnTemplate("  <a role='button' onclick='POInv(#=max#)' class='k-button k-button-icontext k-grid-Print'>Invoice</a>").Width(90);
                }
                columns.Bound(c => c.GRNId).Title("").ClientTemplate(" ").ClientGroupHeaderColumnTemplate("  <a role='button' onclick='GetDoc(#=max#)' class='k-button k-button-icontext k-grid-Print'>Doc</a>").Width(80);
                //columns.Command(c => c.Custom("Detail").Click("OrderDetail").Visible("IsVisible"));
                //columns.Command(c => c.Custom("Print"));
            })
            .Pageable()
            .Sortable()
            .Scrollable()
            .AutoBind(false)
            .Navigatable()
            .ToolBar(t => t.Search())
            //.Editable(e => e.Mode(GridEditMode.InCell))
            .Search(s => { s.Field(a => a.PONo); s.Field(a => a.DONo); s.Field(a => a.SuppName); })
            .HtmlAttributes(new { style = "font-size:12px;height:500px;" })
            //.Groupable(g => g.Enabled(true))
            //.Events(e => e.DataBound("dBound"))
            .Events(e => e.DataBound("setColor"))
            .DataSource(dataSource => dataSource
            .Ajax()
            //.StringifyDates(false)
            .ServerOperation(false)
            .Aggregates(aggregates =>
            {
                aggregates.Add(p => p.PONo).Max();
                aggregates.Add(p => p.SuppName).Max();
                aggregates.Add(p => p.Status).Max();
                aggregates.Add(p => p.LocCode).Max();
                aggregates.Add(p => p.GRNNo).Max();
                aggregates.Add(p => p.GRNDate).Max();
                aggregates.Add(p => p.DONo).Max();
                aggregates.Add(p => p.DODate).Max();
                aggregates.Add(p => p.GRNId).Max();
                aggregates.Add(p => p.Qty).Sum();
                aggregates.Add(p => p.Amount).Sum();
            })
            .Group(groups =>
            {
                //groups.Add(p => p.PONo);
                groups.Add(p => p.GRNNo);
                //groups.Add(p => p.DONo);
                //groups.Add(p => p.LocCode);
            })

            .PageSize(50)
            //.Batch(true)

            .Model(model =>
            {
                model.Id(m => m.GRNId);
            })
            .Read(read => read.Action("POI_Read", "Purchase").Data("filterOrderSearch"))
            //.Create(create => create.Action("OrderPlan_Create", "Order").Data("MasterOrderPlan"))
            //.Update(update => update.Action("UserGroup_Update", "Security"))
            ))
            </div>
        </div>
    </div>
</div>
@Html.Partial("~/Views/Document/_Doc.cshtml")
<style>
    .vouc {
        color: #f00 !important;
    }
</style>
<script>
    function setColor(e) {
        var rows = e.sender.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);
            var isEdit = dataItem.get("IsEdit");
            //console.log(row);
            if (isEdit == true && row[0].className != 'k-grouping-row') {
                row.addClass("vouc");
            }
        }
    }
    function IsVisible(e) {
        if (e.Status == G) {
            return true
        }
        else {
            return false;
        }
    }
    function filterOrderSearch() {
        return {
            SuppId: $('#SuppId').val() || 0,
            fDate: $('#FromDate').val(),
            tDate: $('#ToDate').val(),
            SuppCatId: $('#SuppCatId').val(),
            LocId: $('#LocId').val() || 0,
            CityId: $('#CityId').val() || 0,
            Status: $('#Status').val()
        }
    }
    function suppCatChange() {
        $("#SuppId").data("kendoDropDownList").dataSource.read();
    }
    function loadGrid() {
        $("#gridOrderSearch").data("kendoGrid").dataSource.read();
    }
    function dBound(e) {
        var grid = this;
        $(".k-grouping-row").each(function (e) {
            grid.collapseGroup(this);
        });
    }
    function POInv(grnId) {
        window.open("/Purchase/POInvG?GRNId=" + grnId, "_blank");
    }
    function GetDoc(grnId) {
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //console.log(dataItem);
        //window.open("/Document/EDocumentManager?id=" + dataItem.AccNo + "&refobjid=3");
        $("#DocId").val(grnId);
        $("#RefObjId").val(4);
        $("#frmDoc").submit();
    }
    function filterSupplier() {
        return {
            CategoryId: $('#SuppCatId').val()
        }
    }
    function filterLocation() {
        return {
            CityId: $('#CityId').val() || 0
        }
    }
    function loadLocation() {
        $("#LocId").data("kendoMultiColumnComboBox").dataSource.read();
    }
</script>