
@using AGEERP.Models
@{
    ViewBag.Title = "BikeLetterSale";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .k-grid-header .k-header .k-link, .k-grid-header .k-header, .k-grid-header .k-link, .k-grid-header .k-link:link, .k-pager-info, .k-scheduler-header, .k-scheduler-agendaview .k-scheduler-datecolumn {
        font-size: 12px !important;
    }

    .k-button .k-button-icontext .k-grid-Print {
        font-size: 12px !important;
    }
</style>
<div class="card">
    <div class="content-header">
        <div class="card-header">
            <h3 class="card-title">Bike Sale Search</h3>
            <div class="card-tools">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Purchase</a></li>
                    <li class="breadcrumb-item active">Bike Sale Search</li>
                </ol>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row ">


            <div class="col-md-3 col-sm-3">
                @Html.Label("From Date")
                @Html.Kendo().DatePicker().Name("FromDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("To Date")
                @Html.Kendo().DatePicker().Name("ToDate").Value(DateTime.Now.Date).HtmlAttributes(new { @style = "width:100%" })
            </div>
            <div class="col-3">
                @Html.Label("City")
                @(Html.Kendo()
                    .DropDownList()
                    .Name("CityId")
                    .OptionLabel("All")
                    .DataValueField("CityId")
                    .DataTextField("City")
                    .Filter(FilterType.Contains)
                    .Events(e => e.Change("loadLocation"))
                    .DataSource(ds =>
                    {
                    ds.Read(read => read.Action("CityList", "Setup"));
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>

            <div class="col-md-3 col-sm-3" style="margin-top:-6px">
                @Html.Label("Location")
                @(Html.Kendo()
                    .MultiColumnComboBox()
                    .Name("LocId")
                    .Placeholder("All Locations ...")
                    .DataValueField("LocId")
                    .DataTextField("LocName")
                    //.SelectedIndex(0)
                    .Columns(columns =>
                    {
                        columns.Add().Field("LocCode").Width("100px");
                        columns.Add().Field("LocName").Width("200px");
                    })
                    .FilterFields(new string[] { "LocCode", "LocName" })
                    .Filter(FilterType.Contains)
                    .DataSource(ds =>
                    {
                        ds.Read(read => read.Action("LocationByCityList", "Setup").Data("filterLocation"));
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>
            <div class="col-3">
                @Html.Label("Type")
                @(Html.Kendo()
                    .DropDownList()
                    .Name("TypeId")
                    .OptionLabel("All")
                    .DataValueField("TypeId")
                    .DataTextField("Name")
                    .Filter(FilterType.Contains)

                    .DataSource(ds =>
                    {
                    ds.Read(read => read.Action("TypeListByProductId", "Setup"));
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>


            <div class="col-3">
                @Html.Label("Model")
                @(Html.Kendo()
                    .DropDownList()
                    .Name("ModelId")
                    .OptionLabel("All")
                    .DataValueField("ModelId")
                    .DataTextField("Model")
                    .Filter(FilterType.Contains)
                    .CascadeFrom("TypeId")
                    .DataSource(ds =>
                    {
                    ds.Read(read => read.Action("ModelByTypeList", "Setup").Data("filterModel"))
                    .ServerFiltering(true);
                    })
                    .HtmlAttributes(new { @style = "width:100%" })
                    )
            </div>

            <div class="col-md-3 col-sm-3">
                @Html.Label("Supplier")
                @(Html.Kendo()
                .DropDownList()
                .Name("SuppId")
                .OptionLabel("All Supplier ...")
                //.SelectedIndex(0)
                .DataValueField("SuppId")
                .DataTextField("SuppName")
                .Filter(FilterType.Contains)
                //.Suggest(true)
                .DataSource(ds =>
                {
                    ds.Read(read => read.Action("SupplierByCatList", "Setup").Data("filterSupplier"));
                })
                .HtmlAttributes(new { @style = "width:100%;" })
                )
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("Sale Type")
                @(Html.Kendo()
                .DropDownList()
                .Name("SaleType")
                .SelectedIndex(0)
                .BindTo(SelectListVM.SaleTypeSL)
                .HtmlAttributes(new { @style = "width:100%;" })
                )
            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("SerialNo")
                @(Html.Kendo()
                .TextBox()
                .Name("SerialNo")
                .HtmlAttributes(new { @style = "width:100%", placeholder = "Type Serial No" })
                )

            </div>
            <div class="col-md-3 col-sm-3">
                @Html.Label("BillNo/AccNo")
                @(Html.Kendo()
                .TextBox()
                .Name("BillNo")
                .HtmlAttributes(new { @style = "width:100%" })
                )

            </div>

            <div class="col-md-3 col-sm-3">
                <br />
                <button class="k-button margin-10" type="button" onclick="loadGrid()">
                    <i class="fas fa-search"></i>&nbsp; Search
                </button>
            </div>
        </div>


        <div class="row">
            @(Html.Kendo()
            .Grid<BikeLetterSaleVM>()
            .Name("BikeLetterSaleSearch")
            .Columns(columns =>
            {
                columns.Bound(c => c.Status).Width(80);
                columns.Bound(c => c.BillNo).Width(80);
                columns.Bound(c => c.BillDate).Format("{0: dd/MM/yyyy}").Width(75);
                columns.Bound(c => c.GRNNo).Width(80);
                columns.Bound(c => c.GRNDate).Format("{0: dd/MM/yyyy}").Width(75);
                columns.Bound(c => c.DONo).Width(80);
                columns.Bound(c => c.DODate).Format("{0: dd/MM/yyyy}").Width(75);
                columns.Bound(c => c.SuppName).Width(120);
                columns.Bound(c => c.LocCode).Width(65);
                columns.Bound(c => c.SKUName).Width(120);
                columns.Bound(c => c.SerialNo).Width(100).Title("Serial No");
                columns.Bound(c => c.SaleType).Width(100);
                columns.Bound(c => c.RegFeeCharges).Width(100);
                columns.Bound(c => c.RegFeeStatus).Width(100).ClientTemplate(" #=RegFeeStatus ? 'YES':'NO' #");
                columns.Bound(c => c.LetterStatus).Width(100).ClientTemplate(" #=LetterStatus ? 'YES':'NO' #");
                columns.Bound(c => c.NumberPlate).Width(90);
                columns.Bound(c => c.RegDocStatus).Width(100).ClientTemplate(" #=RegDocStatus ? 'YES':'NO' #");
                columns.Bound(c => c.NumberPlateStatus).Title("Num Plate Status").Width(100).ClientTemplate(" #=NumberPlateStatus ? 'YES':'NO' #");
                columns.Bound(c => c.Remarks).Width(100);
                columns.Command(c => { c.Edit(); }).Width(100);

            })
            //.Pageable()
            .Sortable()
            .Scrollable()
            .AutoBind(false)
            .Navigatable()
            .ToolBar(t => { t.Search(); t.Excel(); })
            //.Editable(e => e.Mode(GridEditMode.InCell))
            .Search(s => { s.Field(a => a.BillNo); s.Field(a => a.SKUName); s.Field(a => a.SerialNo); })
            .HtmlAttributes(new { style = "font-size:12px;height:500px;" })
            //.Groupable(g => g.Enabled(true))
            //.Events(e => e.DataBound("dBound"))
            .DataSource(dataSource => dataSource
            .Ajax()
            //.StringifyDates(false)
            //.ServerOperation(false)
            //.PageSize(50)
            //.Batch(true)

               .Model(model =>
               {
                   model.Id(m => m.ItemId);
                   model.Field(m => m.BillNo).Editable(false);
                   model.Field(m => m.BillDate).Editable(false);
                   model.Field(m => m.LocCode).Editable(false); ;
                   model.Field(m => m.SKUName).Editable(false);
                   model.Field(m => m.SerialNo).Editable(false);
                   model.Field(m => m.GRNNo).Editable(false);
                   model.Field(m => m.GRNDate).Editable(false);
                   model.Field(m => m.SuppName).Editable(false);
                   model.Field(m => m.DONo).Editable(false);
                   model.Field(m => m.DODate).Editable(false);
                   model.Field(m => m.SaleType).Editable(false);
                   model.Field(m => m.Status).Editable(false);
                   model.Field(m => m.RegFeeCharges);
                   model.Field(m => m.RegFeeStatus);
                   model.Field(m => m.LetterStatus);
                   model.Field(m => m.NumberPlate);
                   model.Field(m => m.RegDocStatus);
                   model.Field(m => m.NumberPlateStatus);
                   model.Field(m => m.SaleType);
                   model.Field(m => m.Remarks);
               })
            .Read(read => read.Action("BikeLetterSale_Read", "Purchase").Data("filterBikeSearch"))
            .Update(update => update.Action("BikeLetterSale_Update", "Purchase"))
            ))
            @*</div>*@
        </div>
    </div>
</div>
<script>

    function filterBikeSearch() {

        var dat = {

            FromDate: $('#FromDate').val(),
            ToDate: $('#ToDate').val(),
            CityId: $('#CityId').val() || 0,
            LocId: $('#LocId').val() || 0,
            Type_Id: $('#TypeId').val() || 0,
            SKU_Id: $('#ModelId').val() || 0,
            Supp_Id: $('#SuppId').val() || 0,
            Sale_Type: $('#SaleType').val() || '',
            Serial_No: $('#SerialNo').val() ||  '',
            Bill_No: $('#BillNo').val() || ''
        }
        console.log(dat);
        return dat;
    }
    function suppCatChange() {
        $("#SuppId").data("kendoDropDownList").dataSource.read();
    }
    function loadGrid() {
        $("#BikeLetterSaleSearch").data("kendoGrid").dataSource.read();
    }


    function filterSupplier() {
        return {
            //CategoryId: $('#SuppCatId').val()
              CategoryId: 3
        }
    }






    function filterLocation() {
        return {
            CityId: $('#CityId').val() || 0
        }
    }
    function loadLocation() {
        $("#LocId").data("kendoMultiColumnComboBox").dataSource.read();
    }
    function filterModel() {
        return {
            TypeId: $('#TypeId').val() || 0
        }
    }
</script>


