//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AGEERP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AGEEntities : DbContext
    {
        public AGEEntities()
            : base("name=AGEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comp_City> Comp_City { get; set; }
        public virtual DbSet<Comp_DocumentTypes> Comp_DocumentTypes { get; set; }
        public virtual DbSet<Comp_GeoLocation> Comp_GeoLocation { get; set; }
        public virtual DbSet<Comp_LocationIP> Comp_LocationIP { get; set; }
        public virtual DbSet<Comp_LocationType> Comp_LocationType { get; set; }
        public virtual DbSet<Comp_PaymentTerms> Comp_PaymentTerms { get; set; }
        public virtual DbSet<Comp_Profile> Comp_Profile { get; set; }
        public virtual DbSet<Comp_SystemIntegration> Comp_SystemIntegration { get; set; }
        public virtual DbSet<Comp_Tax> Comp_Tax { get; set; }
        public virtual DbSet<Comp_TransactionType> Comp_TransactionType { get; set; }
        public virtual DbSet<Fin_AcClasses> Fin_AcClasses { get; set; }
        public virtual DbSet<Fin_AcControls> Fin_AcControls { get; set; }
        public virtual DbSet<Fin_Accounts> Fin_Accounts { get; set; }
        public virtual DbSet<Fin_AcGroups> Fin_AcGroups { get; set; }
        public virtual DbSet<Fin_AutoVoucherLog> Fin_AutoVoucherLog { get; set; }
        public virtual DbSet<Fin_BankBook> Fin_BankBook { get; set; }
        public virtual DbSet<Fin_BankBookCancelCheqs> Fin_BankBookCancelCheqs { get; set; }
        public virtual DbSet<Fin_BankBookTrans> Fin_BankBookTrans { get; set; }
        public virtual DbSet<Fin_Category> Fin_Category { get; set; }
        public virtual DbSet<Fin_CostCenters> Fin_CostCenters { get; set; }
        public virtual DbSet<Fin_PaymentAdvice> Fin_PaymentAdvice { get; set; }
        public virtual DbSet<Fin_PaymentAdviceDetail> Fin_PaymentAdviceDetail { get; set; }
        public virtual DbSet<Fin_Period> Fin_Period { get; set; }
        public virtual DbSet<Fin_ProfitCenters> Fin_ProfitCenters { get; set; }
        public virtual DbSet<Fin_Subsidary> Fin_Subsidary { get; set; }
        public virtual DbSet<Fin_SubsidaryType> Fin_SubsidaryType { get; set; }
        public virtual DbSet<Fin_Voucher> Fin_Voucher { get; set; }
        public virtual DbSet<Fin_VoucherCounter> Fin_VoucherCounter { get; set; }
        public virtual DbSet<Fin_VoucherTypes> Fin_VoucherTypes { get; set; }
        public virtual DbSet<Fin_Year> Fin_Year { get; set; }
        public virtual DbSet<Inv_GRN> Inv_GRN { get; set; }
        public virtual DbSet<Inv_GRNDetail> Inv_GRNDetail { get; set; }
        public virtual DbSet<Inv_Issue> Inv_Issue { get; set; }
        public virtual DbSet<Inv_IssueDetail> Inv_IssueDetail { get; set; }
        public virtual DbSet<Inv_PaymentMode> Inv_PaymentMode { get; set; }
        public virtual DbSet<Inv_PO> Inv_PO { get; set; }
        public virtual DbSet<Inv_PODetail> Inv_PODetail { get; set; }
        public virtual DbSet<Inv_POMapping> Inv_POMapping { get; set; }
        public virtual DbSet<Inv_POPlan> Inv_POPlan { get; set; }
        public virtual DbSet<Inv_POPlanDetail> Inv_POPlanDetail { get; set; }
        public virtual DbSet<Inv_POPlanMapping> Inv_POPlanMapping { get; set; }
        public virtual DbSet<Inv_POReturn> Inv_POReturn { get; set; }
        public virtual DbSet<Inv_POReturnDtl> Inv_POReturnDtl { get; set; }
        public virtual DbSet<Inv_POSchedule> Inv_POSchedule { get; set; }
        public virtual DbSet<Inv_POStatus> Inv_POStatus { get; set; }
        public virtual DbSet<Inv_POType> Inv_POType { get; set; }
        public virtual DbSet<Inv_Sale> Inv_Sale { get; set; }
        public virtual DbSet<Inv_Status> Inv_Status { get; set; }
        public virtual DbSet<Inv_StockOpening> Inv_StockOpening { get; set; }
        public virtual DbSet<Inv_Store> Inv_Store { get; set; }
        public virtual DbSet<Inv_SuppliersCat> Inv_SuppliersCat { get; set; }
        public virtual DbSet<Inv_SuppliersMapping> Inv_SuppliersMapping { get; set; }
        public virtual DbSet<Itm_Category> Itm_Category { get; set; }
        public virtual DbSet<Itm_Color> Itm_Color { get; set; }
        public virtual DbSet<Itm_Company> Itm_Company { get; set; }
        public virtual DbSet<Itm_DiscountPolicy> Itm_DiscountPolicy { get; set; }
        public virtual DbSet<Itm_DiscountPolicyModel> Itm_DiscountPolicyModel { get; set; }
        public virtual DbSet<Itm_DiscountPolicySlab> Itm_DiscountPolicySlab { get; set; }
        public virtual DbSet<Itm_Model> Itm_Model { get; set; }
        public virtual DbSet<Itm_PairPolicy> Itm_PairPolicy { get; set; }
        public virtual DbSet<Itm_PPrice> Itm_PPrice { get; set; }
        public virtual DbSet<Itm_Products> Itm_Products { get; set; }
        public virtual DbSet<Itm_SKUPlan> Itm_SKUPlan { get; set; }
        public virtual DbSet<Itm_SPrice> Itm_SPrice { get; set; }
        public virtual DbSet<Itm_Type> Itm_Type { get; set; }
        public virtual DbSet<Lse_CashCollectionHeads> Lse_CashCollectionHeads { get; set; }
        public virtual DbSet<Lse_CashTransfer> Lse_CashTransfer { get; set; }
        public virtual DbSet<Lse_Category> Lse_Category { get; set; }
        public virtual DbSet<Lse_Cheque> Lse_Cheque { get; set; }
        public virtual DbSet<Lse_Customer> Lse_Customer { get; set; }
        public virtual DbSet<Lse_DayClosing> Lse_DayClosing { get; set; }
        public virtual DbSet<Lse_Detail> Lse_Detail { get; set; }
        public virtual DbSet<Lse_ExpenseTransaction> Lse_ExpenseTransaction { get; set; }
        public virtual DbSet<Lse_ExpType> Lse_ExpType { get; set; }
        public virtual DbSet<Lse_Guarantor> Lse_Guarantor { get; set; }
        public virtual DbSet<Lse_Installment> Lse_Installment { get; set; }
        public virtual DbSet<Lse_Outstand> Lse_Outstand { get; set; }
        public virtual DbSet<Lse_SaleTarget> Lse_SaleTarget { get; set; }
        public virtual DbSet<Lse_SaleTargetLog> Lse_SaleTargetLog { get; set; }
        public virtual DbSet<Lse_SearchCriteria> Lse_SearchCriteria { get; set; }
        public virtual DbSet<Pay_Allowance> Pay_Allowance { get; set; }
        public virtual DbSet<Pay_AllowanceTrans> Pay_AllowanceTrans { get; set; }
        public virtual DbSet<Pay_AllownaceAllocation> Pay_AllownaceAllocation { get; set; }
        public virtual DbSet<Pay_Attendance> Pay_Attendance { get; set; }
        public virtual DbSet<Pay_AttendanceAdjReason> Pay_AttendanceAdjReason { get; set; }
        public virtual DbSet<Pay_AttendanceFinal> Pay_AttendanceFinal { get; set; }
        public virtual DbSet<Pay_AttendanceLog> Pay_AttendanceLog { get; set; }
        public virtual DbSet<Pay_AttendanceStatus> Pay_AttendanceStatus { get; set; }
        public virtual DbSet<Pay_BranchStaffStrength> Pay_BranchStaffStrength { get; set; }
        public virtual DbSet<Pay_BranchStaffStrengthLog> Pay_BranchStaffStrengthLog { get; set; }
        public virtual DbSet<Pay_Deduction> Pay_Deduction { get; set; }
        public virtual DbSet<Pay_DeductionAllocation> Pay_DeductionAllocation { get; set; }
        public virtual DbSet<Pay_DeductionTrans> Pay_DeductionTrans { get; set; }
        public virtual DbSet<Pay_Department> Pay_Department { get; set; }
        public virtual DbSet<Pay_DepartmentLog> Pay_DepartmentLog { get; set; }
        public virtual DbSet<Pay_Designation> Pay_Designation { get; set; }
        public virtual DbSet<Pay_DesignationLog> Pay_DesignationLog { get; set; }
        public virtual DbSet<Pay_Education> Pay_Education { get; set; }
        public virtual DbSet<Pay_EmpFine> Pay_EmpFine { get; set; }
        public virtual DbSet<Pay_EmpFineDetail> Pay_EmpFineDetail { get; set; }
        public virtual DbSet<Pay_EmpFineType> Pay_EmpFineType { get; set; }
        public virtual DbSet<Pay_EmpLeave> Pay_EmpLeave { get; set; }
        public virtual DbSet<Pay_EmpLoanTransaction> Pay_EmpLoanTransaction { get; set; }
        public virtual DbSet<Pay_EmpLocationMapping> Pay_EmpLocationMapping { get; set; }
        public virtual DbSet<Pay_EmpMaster> Pay_EmpMaster { get; set; }
        public virtual DbSet<Pay_EmpPerformance> Pay_EmpPerformance { get; set; }
        public virtual DbSet<Pay_EmpPerformanceType> Pay_EmpPerformanceType { get; set; }
        public virtual DbSet<Pay_EmpReportingHierarchy> Pay_EmpReportingHierarchy { get; set; }
        public virtual DbSet<Pay_EmpRole> Pay_EmpRole { get; set; }
        public virtual DbSet<Pay_EmpSalary> Pay_EmpSalary { get; set; }
        public virtual DbSet<Pay_EmpStatus> Pay_EmpStatus { get; set; }
        public virtual DbSet<Pay_EmpTax> Pay_EmpTax { get; set; }
        public virtual DbSet<Pay_EmpTaxSlabs> Pay_EmpTaxSlabs { get; set; }
        public virtual DbSet<Pay_EmpTemplate> Pay_EmpTemplate { get; set; }
        public virtual DbSet<Pay_EmpTemplateFace> Pay_EmpTemplateFace { get; set; }
        public virtual DbSet<Pay_EmpVehicles> Pay_EmpVehicles { get; set; }
        public virtual DbSet<Pay_Experience> Pay_Experience { get; set; }
        public virtual DbSet<Pay_HDepartment> Pay_HDepartment { get; set; }
        public virtual DbSet<Pay_LeaveCategory> Pay_LeaveCategory { get; set; }
        public virtual DbSet<Pay_LeaveRoster> Pay_LeaveRoster { get; set; }
        public virtual DbSet<Pay_LoanTypes> Pay_LoanTypes { get; set; }
        public virtual DbSet<Pay_PayScales> Pay_PayScales { get; set; }
        public virtual DbSet<Pay_Qualification> Pay_Qualification { get; set; }
        public virtual DbSet<Pay_Role> Pay_Role { get; set; }
        public virtual DbSet<Pay_SalarySheet> Pay_SalarySheet { get; set; }
        public virtual DbSet<Pay_SalaryTypes> Pay_SalaryTypes { get; set; }
        public virtual DbSet<Pay_Shift> Pay_Shift { get; set; }
        public virtual DbSet<Users_Group> Users_Group { get; set; }
        public virtual DbSet<Users_GroupAccess> Users_GroupAccess { get; set; }
        public virtual DbSet<Users_GroupMenuObjectAccess> Users_GroupMenuObjectAccess { get; set; }
        public virtual DbSet<Users_Log> Users_Log { get; set; }
        public virtual DbSet<Users_Login> Users_Login { get; set; }
        public virtual DbSet<Users_LoginLog> Users_LoginLog { get; set; }
        public virtual DbSet<Users_Menu> Users_Menu { get; set; }
        public virtual DbSet<Users_MenuObject> Users_MenuObject { get; set; }
        public virtual DbSet<Users_MobileMenu> Users_MobileMenu { get; set; }
        public virtual DbSet<Users_UserAccess> Users_UserAccess { get; set; }
        public virtual DbSet<Users_UserMenuObjectAccess> Users_UserMenuObjectAccess { get; set; }
        public virtual DbSet<Inventory_ItemsDetail> Inventory_ItemsDetail { get; set; }
        public virtual DbSet<Inv_OpeningStock> Inv_OpeningStock { get; set; }
        public virtual DbSet<Inv_POPlanCity> Inv_POPlanCity { get; set; }
        public virtual DbSet<Inv_POPlanCityDetail> Inv_POPlanCityDetail { get; set; }
        public virtual DbSet<Inv_SuppliersCity> Inv_SuppliersCity { get; set; }
        public virtual DbSet<Inv_Complain> Inv_Complain { get; set; }
        public virtual DbSet<Itm_ProductClass> Itm_ProductClass { get; set; }
        public virtual DbSet<Comp_Documents> Comp_Documents { get; set; }
        public virtual DbSet<Inv_StoreLog> Inv_StoreLog { get; set; }
        public virtual DbSet<Itm_Master> Itm_Master { get; set; }
        public virtual DbSet<Comp_LocationsMapping> Comp_LocationsMapping { get; set; }
        public virtual DbSet<Pay_EmpReferences> Pay_EmpReferences { get; set; }
        public virtual DbSet<Pay_EmpCheque> Pay_EmpCheque { get; set; }
        public virtual DbSet<Pay_BasicSalaryPolicyLocations> Pay_BasicSalaryPolicyLocations { get; set; }
        public virtual DbSet<Pay_BasicSalarySlab> Pay_BasicSalarySlab { get; set; }
        public virtual DbSet<Pay_BasicSalarySlabDtl> Pay_BasicSalarySlabDtl { get; set; }
        public virtual DbSet<Pay_DesignationSection> Pay_DesignationSection { get; set; }
        public virtual DbSet<Pay_EmpPerformanceDetail> Pay_EmpPerformanceDetail { get; set; }
        public virtual DbSet<Pay_BasicSalaryPolicy> Pay_BasicSalaryPolicy { get; set; }
        public virtual DbSet<Lse_PendingRecovery> Lse_PendingRecovery { get; set; }
        public virtual DbSet<Lse_Status> Lse_Status { get; set; }
        public virtual DbSet<Users_Feedback> Users_Feedback { get; set; }
        public virtual DbSet<Lse_BlockCustomer> Lse_BlockCustomer { get; set; }
        public virtual DbSet<Lse_CashDeposit> Lse_CashDeposit { get; set; }
        public virtual DbSet<Inv_StockVerification> Inv_StockVerification { get; set; }
        public virtual DbSet<Fin_BankMapping> Fin_BankMapping { get; set; }
        public virtual DbSet<Users_Notifications> Users_Notifications { get; set; }
        public virtual DbSet<Lse_ExpenseHead> Lse_ExpenseHead { get; set; }
        public virtual DbSet<Inv_SuppCatGL> Inv_SuppCatGL { get; set; }
        public virtual DbSet<Fin_VoucherDetail> Fin_VoucherDetail { get; set; }
        public virtual DbSet<Itm_SerialPlan> Itm_SerialPlan { get; set; }
        public virtual DbSet<Inv_OpeningStockMobile> Inv_OpeningStockMobile { get; set; }
        public virtual DbSet<Itm_SKUPair> Itm_SKUPair { get; set; }
        public virtual DbSet<Users_MobileMAccess> Users_MobileMAccess { get; set; }
        public virtual DbSet<Users_NotificationMapping> Users_NotificationMapping { get; set; }
        public virtual DbSet<Pay_IncentivePolicy> Pay_IncentivePolicy { get; set; }
        public virtual DbSet<Pay_IncentivePolicyLocations> Pay_IncentivePolicyLocations { get; set; }
        public virtual DbSet<Lse_CashReceive> Lse_CashReceive { get; set; }
        public virtual DbSet<Inv_POPayment> Inv_POPayment { get; set; }
        public virtual DbSet<Pay_SalarySheet_E> Pay_SalarySheet_E { get; set; }
        public virtual DbSet<Pay_EmpAppointmentTypes> Pay_EmpAppointmentTypes { get; set; }
        public virtual DbSet<Lse_Return> Lse_Return { get; set; }
        public virtual DbSet<Tax_Invoice> Tax_Invoice { get; set; }
        public virtual DbSet<Tax_InvoiceItems> Tax_InvoiceItems { get; set; }
        public virtual DbSet<Pay_EmpTransferLog> Pay_EmpTransferLog { get; set; }
        public virtual DbSet<Lse_Master> Lse_Master { get; set; }
        public virtual DbSet<Lse_MOS> Lse_MOS { get; set; }
        public virtual DbSet<Lse_SaleTargetTypes> Lse_SaleTargetTypes { get; set; }
        public virtual DbSet<Fin_YearLog> Fin_YearLog { get; set; }
        public virtual DbSet<Lse_OutstandLog> Lse_OutstandLog { get; set; }
        public virtual DbSet<Lse_InstallmentLog> Lse_InstallmentLog { get; set; }
        public virtual DbSet<Fin_PeriodLog> Fin_PeriodLog { get; set; }
        public virtual DbSet<Pay_SalarySheet_VD> Pay_SalarySheet_VD { get; set; }
        public virtual DbSet<Inv_PurchaseDetail> Inv_PurchaseDetail { get; set; }
        public virtual DbSet<Inv_PR> Inv_PR { get; set; }
        public virtual DbSet<Inv_PRDetail> Inv_PRDetail { get; set; }
        public virtual DbSet<Comp_Dashboard> Comp_Dashboard { get; set; }
        public virtual DbSet<Pay_LeaveTypes> Pay_LeaveTypes { get; set; }
        public virtual DbSet<Inv_SuppPayment> Inv_SuppPayment { get; set; }
        public virtual DbSet<Lse_CashPayment> Lse_CashPayment { get; set; }
        public virtual DbSet<Pay_EmpBank> Pay_EmpBank { get; set; }
        public virtual DbSet<Inv_StoreHistory> Inv_StoreHistory { get; set; }
        public virtual DbSet<Inv_Suppliers> Inv_Suppliers { get; set; }
        public virtual DbSet<Itm_PDisc> Itm_PDisc { get; set; }
        public virtual DbSet<Itm_PDiscType> Itm_PDiscType { get; set; }
        public virtual DbSet<Pay_EmpPromotions> Pay_EmpPromotions { get; set; }
        public virtual DbSet<Itm_UOM> Itm_UOM { get; set; }
        public virtual DbSet<Itm_TypePlan> Itm_TypePlan { get; set; }
        public virtual DbSet<Lse_CustomerTemplate> Lse_CustomerTemplate { get; set; }
        public virtual DbSet<Pay_BankSalaryTransfer> Pay_BankSalaryTransfer { get; set; }
        public virtual DbSet<Pay_BankSalaryTransferDetail> Pay_BankSalaryTransferDetail { get; set; }
        public virtual DbSet<Users_Modification> Users_Modification { get; set; }
        public virtual DbSet<Lse_PaidBy> Lse_PaidBy { get; set; }
        public virtual DbSet<Inv_Purchase> Inv_Purchase { get; set; }
        public virtual DbSet<Lse_SMS> Lse_SMS { get; set; }
        public virtual DbSet<Lse_CER> Lse_CER { get; set; }
        public virtual DbSet<Lse_CashCollectionDetail> Lse_CashCollectionDetail { get; set; }
        public virtual DbSet<Lse_CashPaymentHeads> Lse_CashPaymentHeads { get; set; }
        public virtual DbSet<Comp_DocShare> Comp_DocShare { get; set; }
        public virtual DbSet<Comp_DocShareDetail> Comp_DocShareDetail { get; set; }
        public virtual DbSet<Itm_SaleRate> Itm_SaleRate { get; set; }
        public virtual DbSet<Lse_SMSSchedule> Lse_SMSSchedule { get; set; }
        public virtual DbSet<Pay_EmpLoan> Pay_EmpLoan { get; set; }
        public virtual DbSet<Itm_PlanPolicy> Itm_PlanPolicy { get; set; }
        public virtual DbSet<Pay_SalaryDisbursementTypes> Pay_SalaryDisbursementTypes { get; set; }
        public virtual DbSet<Pay_SalarySheet_TI> Pay_SalarySheet_TI { get; set; }
        public virtual DbSet<Pay_EmpStatusLog> Pay_EmpStatusLog { get; set; }
        public virtual DbSet<Pay_SalaryDisbursementLog> Pay_SalaryDisbursementLog { get; set; }
        public virtual DbSet<Pay_SalaryDisbursementControlPanel> Pay_SalaryDisbursementControlPanel { get; set; }
        public virtual DbSet<Itm_Barcode> Itm_Barcode { get; set; }
        public virtual DbSet<Inv_POScheduleLog> Inv_POScheduleLog { get; set; }
        public virtual DbSet<Inv_POSchMaster> Inv_POSchMaster { get; set; }
        public virtual DbSet<Inv_StockVerificationDtl> Inv_StockVerificationDtl { get; set; }
        public virtual DbSet<Lse_LatLng> Lse_LatLng { get; set; }
        public virtual DbSet<Users_Chat> Users_Chat { get; set; }
        public virtual DbSet<Pay_ProductIncPolicy> Pay_ProductIncPolicy { get; set; }
        public virtual DbSet<Pay_ProductIncPolicyLocations> Pay_ProductIncPolicyLocations { get; set; }
        public virtual DbSet<Pay_TargetIncentivePolicy> Pay_TargetIncentivePolicy { get; set; }
        public virtual DbSet<Pay_TargetIncentivePolicyDetail> Pay_TargetIncentivePolicyDetail { get; set; }
        public virtual DbSet<Pay_TargetIncentivePolicyLocations> Pay_TargetIncentivePolicyLocations { get; set; }
        public virtual DbSet<Pay_ProductInc> Pay_ProductInc { get; set; }
        public virtual DbSet<Pay_ProductIncCash> Pay_ProductIncCash { get; set; }
        public virtual DbSet<Pay_ProductIncIMEI> Pay_ProductIncIMEI { get; set; }
        public virtual DbSet<Pay_ProductIncInst> Pay_ProductIncInst { get; set; }
        public virtual DbSet<Inv_SaleOrderDetail> Inv_SaleOrderDetail { get; set; }
        public virtual DbSet<Pay_EmpHierarchy> Pay_EmpHierarchy { get; set; }
        public virtual DbSet<Inv_SaleOrder> Inv_SaleOrder { get; set; }
        public virtual DbSet<Pay_EmpBasicSalary> Pay_EmpBasicSalary { get; set; }
        public virtual DbSet<Pay_SalaryDisbursement> Pay_SalaryDisbursement { get; set; }
        public virtual DbSet<Pay_EmpJoiningLog> Pay_EmpJoiningLog { get; set; }
        public virtual DbSet<Inv_SaleDiscount> Inv_SaleDiscount { get; set; }
        public virtual DbSet<Inv_POPocket> Inv_POPocket { get; set; }
        public virtual DbSet<Itm_TypePlanMaster> Itm_TypePlanMaster { get; set; }
        public virtual DbSet<Inv_BikeLetter> Inv_BikeLetter { get; set; }
        public virtual DbSet<Inv_BikeReg> Inv_BikeReg { get; set; }
        public virtual DbSet<Inv_SaleDetail> Inv_SaleDetail { get; set; }
        public virtual DbSet<Pay_BranchClosingLog> Pay_BranchClosingLog { get; set; }
        public virtual DbSet<Pay_ProductIncCalendar> Pay_ProductIncCalendar { get; set; }
        public virtual DbSet<Inv_SuppTaxExemption> Inv_SuppTaxExemption { get; set; }
        public virtual DbSet<Users_MobileMenuObject> Users_MobileMenuObject { get; set; }
        public virtual DbSet<Lse_Audit> Lse_Audit { get; set; }
        public virtual DbSet<Lse_AuditLog> Lse_AuditLog { get; set; }
        public virtual DbSet<Pay_HolidayDetail> Pay_HolidayDetail { get; set; }
        public virtual DbSet<Pay_HolidayMaster> Pay_HolidayMaster { get; set; }
        public virtual DbSet<Pay_Holidays> Pay_Holidays { get; set; }
        public virtual DbSet<Users_LoginRequest> Users_LoginRequest { get; set; }
        public virtual DbSet<Crm_Category> Crm_Category { get; set; }
        public virtual DbSet<Crm_ComplainMapping> Crm_ComplainMapping { get; set; }
        public virtual DbSet<Crm_Respondent> Crm_Respondent { get; set; }
        public virtual DbSet<Crm_Response> Crm_Response { get; set; }
        public virtual DbSet<Crm_Ticket> Crm_Ticket { get; set; }
        public virtual DbSet<Inv_StockAdj> Inv_StockAdj { get; set; }
        public virtual DbSet<Inv_SaleCart> Inv_SaleCart { get; set; }
        public virtual DbSet<Lse_InstAdj> Lse_InstAdj { get; set; }
        public virtual DbSet<Inv_SaleCreditReceive> Inv_SaleCreditReceive { get; set; }
        public virtual DbSet<Fin_GroupAccess> Fin_GroupAccess { get; set; }
        public virtual DbSet<Fin_UserAccess> Fin_UserAccess { get; set; }
        public virtual DbSet<Inv_BikeLetter_Old> Inv_BikeLetter_Old { get; set; }
        public virtual DbSet<Inv_BikeReg_Old> Inv_BikeReg_Old { get; set; }
        public virtual DbSet<Inv_AdjOut> Inv_AdjOut { get; set; }
        public virtual DbSet<Inv_AdjOutDetail> Inv_AdjOutDetail { get; set; }
        public virtual DbSet<Inv_AdjType> Inv_AdjType { get; set; }
        public virtual DbSet<Fin_Notes> Fin_Notes { get; set; }
        public virtual DbSet<Fin_OpeningBalance> Fin_OpeningBalance { get; set; }
        public virtual DbSet<Fin_SubsidiaryMapping> Fin_SubsidiaryMapping { get; set; }
        public virtual DbSet<Fin_VoucherPostingLog> Fin_VoucherPostingLog { get; set; }
        public virtual DbSet<Pay_HierarchyLog> Pay_HierarchyLog { get; set; }
        public virtual DbSet<Pay_CharityDonationTrans> Pay_CharityDonationTrans { get; set; }
        public virtual DbSet<Pay_CharityDonationTransDtl> Pay_CharityDonationTransDtl { get; set; }
        public virtual DbSet<Comp_Region> Comp_Region { get; set; }
        public virtual DbSet<Pay_DesgRole> Pay_DesgRole { get; set; }
        public virtual DbSet<Pay_CharityDonation> Pay_CharityDonation { get; set; }
        public virtual DbSet<Lse_CashCollection> Lse_CashCollection { get; set; }
        public virtual DbSet<LSE_CrcFinePolicy> LSE_CrcFinePolicy { get; set; }
        public virtual DbSet<LSE_CrcFinePolicyDtl> LSE_CrcFinePolicyDtl { get; set; }
        public virtual DbSet<Lse_ReturnReason> Lse_ReturnReason { get; set; }
        public virtual DbSet<Pay_AICManager> Pay_AICManager { get; set; }
        public virtual DbSet<Comp_DocTransfer> Comp_DocTransfer { get; set; }
        public virtual DbSet<Pro_GRN> Pro_GRN { get; set; }
        public virtual DbSet<Pro_GRNDetail> Pro_GRNDetail { get; set; }
        public virtual DbSet<Pro_Item> Pro_Item { get; set; }
        public virtual DbSet<Pro_ItemCategory> Pro_ItemCategory { get; set; }
        public virtual DbSet<Pro_ItemNature> Pro_ItemNature { get; set; }
        public virtual DbSet<Pro_PODetail> Pro_PODetail { get; set; }
        public virtual DbSet<Pro_PO> Pro_PO { get; set; }
        public virtual DbSet<Comp_Locations> Comp_Locations { get; set; }
        public virtual DbSet<Fin_BRS> Fin_BRS { get; set; }
        public virtual DbSet<Fin_BRSDetail> Fin_BRSDetail { get; set; }
        public virtual DbSet<Inv_Customers> Inv_Customers { get; set; }
        public virtual DbSet<Fin_BackendInc> Fin_BackendInc { get; set; }
        public virtual DbSet<Fin_BackendIncBasis> Fin_BackendIncBasis { get; set; }
        public virtual DbSet<Fin_BackendIncDtl> Fin_BackendIncDtl { get; set; }
        public virtual DbSet<Fin_BackendIncPolicy> Fin_BackendIncPolicy { get; set; }
        public virtual DbSet<Fin_BackendIncPolicyDtl> Fin_BackendIncPolicyDtl { get; set; }
        public virtual DbSet<Fin_BackendIncTypes> Fin_BackendIncTypes { get; set; }
        public virtual DbSet<Far_Allocation> Far_Allocation { get; set; }
        public virtual DbSet<Far_Opening> Far_Opening { get; set; }
        public virtual DbSet<Far_Store> Far_Store { get; set; }
        public virtual DbSet<Pay_WishEmailTemplate> Pay_WishEmailTemplate { get; set; }
        public virtual DbSet<Pro_MTR> Pro_MTR { get; set; }
        public virtual DbSet<Pro_SIN> Pro_SIN { get; set; }
        public virtual DbSet<Pro_SINDetail> Pro_SINDetail { get; set; }
        public virtual DbSet<Pro_Stock> Pro_Stock { get; set; }
        public virtual DbSet<Pro_MTRDetail> Pro_MTRDetail { get; set; }
        public virtual DbSet<Pro_ItemBrand> Pro_ItemBrand { get; set; }
        public virtual DbSet<Pro_ItemProduct> Pro_ItemProduct { get; set; }
        public virtual DbSet<Far_Depreciation> Far_Depreciation { get; set; }
        public virtual DbSet<Fin_CostType> Fin_CostType { get; set; }
        public virtual DbSet<Crm_MCategory> Crm_MCategory { get; set; }
        public virtual DbSet<Lse_CrcFines> Lse_CrcFines { get; set; }
        public virtual DbSet<Pay_ProductIncPolicyDetail> Pay_ProductIncPolicyDetail { get; set; }
        public virtual DbSet<Pay_EmpBankSalary> Pay_EmpBankSalary { get; set; }
        public virtual DbSet<Crm_InvComplain> Crm_InvComplain { get; set; }
    
        public virtual ObjectResult<spget_ModelSaleStockLoc_Result> spget_ModelSaleStockLoc(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ModelSaleStockLoc_Result>("spget_ModelSaleStockLoc", orderNoParameter);
        }
    
        public virtual ObjectResult<spget_OrderDetail_Result> spget_OrderDetail(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_OrderDetail_Result>("spget_OrderDetail", orderNoParameter);
        }
    
        public virtual ObjectResult<spget_ItemsDetail_Result> spget_ItemsDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ItemsDetail_Result>("spget_ItemsDetail");
        }
    
        public virtual ObjectResult<spget_ModelSaleStockForPO_Result> spget_ModelSaleStockForPO(Nullable<int> typeId, Nullable<int> locId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ModelSaleStockForPO_Result>("spget_ModelSaleStockForPO", typeIdParameter, locIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spget_CashLoc_Result> spget_CashLoc(Nullable<System.DateTime> dt, Nullable<int> locId)
        {
            var dtParameter = dt.HasValue ?
                new ObjectParameter("Dt", dt) :
                new ObjectParameter("Dt", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_CashLoc_Result>("spget_CashLoc", dtParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spget_OutStandNew_Result> spget_OutStandNew(Nullable<int> locId, string category)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_OutStandNew_Result>("spget_OutStandNew", locIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<spget_ModelPrice_Result> spget_ModelPrice(Nullable<int> comId, Nullable<int> productId, Nullable<int> cityId, Nullable<int> duration, string type)
        {
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("ComId", comId) :
                new ObjectParameter("ComId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ModelPrice_Result>("spget_ModelPrice", comIdParameter, productIdParameter, cityIdParameter, durationParameter, typeParameter);
        }
    
        public virtual ObjectResult<spget_ModelSaleStock_Result> spget_ModelSaleStock(Nullable<int> modelId, Nullable<int> cityId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ModelSaleStock_Result>("spget_ModelSaleStock", modelIdParameter, cityIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spget_OrderSearch_Result> spget_OrderSearch(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> status, Nullable<int> suppId, string pONo, string pOInvNo)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var pOInvNoParameter = pOInvNo != null ?
                new ObjectParameter("POInvNo", pOInvNo) :
                new ObjectParameter("POInvNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_OrderSearch_Result>("spget_OrderSearch", fromDateParameter, toDateParameter, statusParameter, suppIdParameter, pONoParameter, pOInvNoParameter);
        }
    
        public virtual ObjectResult<spget_SaleStockForSchedule_Result> spget_SaleStockForSchedule(Nullable<int> rowId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_SaleStockForSchedule_Result>("spget_SaleStockForSchedule", rowIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spget_BankSubCode_Result> spget_BankSubCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_BankSubCode_Result>("spget_BankSubCode");
        }
    
        public virtual ObjectResult<spget_CashSubCode_Result> spget_CashSubCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_CashSubCode_Result>("spget_CashSubCode");
        }
    
        public virtual ObjectResult<spget_AccountSearch_Result> spget_AccountSearch(Nullable<int> locId, Nullable<int> criteria1, string criteria1Value, Nullable<int> criteria2, string criteria2Value)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var criteria1Parameter = criteria1.HasValue ?
                new ObjectParameter("Criteria1", criteria1) :
                new ObjectParameter("Criteria1", typeof(int));
    
            var criteria1ValueParameter = criteria1Value != null ?
                new ObjectParameter("Criteria1Value", criteria1Value) :
                new ObjectParameter("Criteria1Value", typeof(string));
    
            var criteria2Parameter = criteria2.HasValue ?
                new ObjectParameter("Criteria2", criteria2) :
                new ObjectParameter("Criteria2", typeof(int));
    
            var criteria2ValueParameter = criteria2Value != null ?
                new ObjectParameter("Criteria2Value", criteria2Value) :
                new ObjectParameter("Criteria2Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_AccountSearch_Result>("spget_AccountSearch", locIdParameter, criteria1Parameter, criteria1ValueParameter, criteria2Parameter, criteria2ValueParameter);
        }
    
        public virtual ObjectResult<spget_DayClose_Result> spget_DayClose(Nullable<System.DateTime> workingDate, Nullable<int> locId)
        {
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_DayClose_Result>("spget_DayClose", workingDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spget_CashCollection_Result> spget_CashCollection(Nullable<int> locId, Nullable<System.DateTime> currentDate)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_CashCollection_Result>("spget_CashCollection", locIdParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<spget_PayBranchStrength_Result> spget_PayBranchStrength()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_PayBranchStrength_Result>("spget_PayBranchStrength");
        }
    
        public virtual ObjectResult<spget_SaleForVoucherPosting_Result> spget_SaleForVoucherPosting(string city, Nullable<System.DateTime> workingDate)
        {
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_SaleForVoucherPosting_Result>("spget_SaleForVoucherPosting", cityParameter, workingDateParameter);
        }
    
        public virtual ObjectResult<spget_SaleByType_Result> spget_SaleByType(Nullable<System.DateTime> workingDate, Nullable<int> locId, string type)
        {
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_SaleByType_Result>("spget_SaleByType", workingDateParameter, locIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<spget_PayProcessPerformance_Result> spget_PayProcessPerformance(Nullable<System.DateTime> performanceMonth, Nullable<int> pTypeId, Nullable<int> userId)
        {
            var performanceMonthParameter = performanceMonth.HasValue ?
                new ObjectParameter("PerformanceMonth", performanceMonth) :
                new ObjectParameter("PerformanceMonth", typeof(System.DateTime));
    
            var pTypeIdParameter = pTypeId.HasValue ?
                new ObjectParameter("PTypeId", pTypeId) :
                new ObjectParameter("PTypeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_PayProcessPerformance_Result>("spget_PayProcessPerformance", performanceMonthParameter, pTypeIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spget_Pay_EmpTemplateByLoc(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spget_Pay_EmpTemplateByLoc", locIdParameter);
        }
    
        public virtual ObjectResult<spget_ModelSaleStockMobile_Result> spget_ModelSaleStockMobile(Nullable<int> sKUId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string locType)
        {
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_ModelSaleStockMobile_Result>("spget_ModelSaleStockMobile", sKUIdParameter, fromDateParameter, toDateParameter, locTypeParameter);
        }
    
        public virtual ObjectResult<spMark_FinalAttendance_Result> spMark_FinalAttendance(Nullable<System.DateTime> workingdate, Nullable<int> hDeptId, Nullable<int> deptId, Nullable<int> userId)
        {
            var workingdateParameter = workingdate.HasValue ?
                new ObjectParameter("workingdate", workingdate) :
                new ObjectParameter("workingdate", typeof(System.DateTime));
    
            var hDeptIdParameter = hDeptId.HasValue ?
                new ObjectParameter("HDeptId", hDeptId) :
                new ObjectParameter("HDeptId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMark_FinalAttendance_Result>("spMark_FinalAttendance", workingdateParameter, hDeptIdParameter, deptIdParameter, userIdParameter);
        }
    
        public virtual int spPay_SalaryProcess_HO_Test(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_HO_Test", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual ObjectResult<spget_SaleForVoucherPosting_V1_Result> spget_SaleForVoucherPosting_V1(Nullable<int> locId, Nullable<int> saleTypeId, Nullable<System.DateTime> workingDate)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var saleTypeIdParameter = saleTypeId.HasValue ?
                new ObjectParameter("SaleTypeId", saleTypeId) :
                new ObjectParameter("SaleTypeId", typeof(int));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_SaleForVoucherPosting_V1_Result>("spget_SaleForVoucherPosting_V1", locIdParameter, saleTypeIdParameter, workingDateParameter);
        }
    
        public virtual ObjectResult<spget_LocManagers_Result> spget_LocManagers(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_LocManagers_Result>("spget_LocManagers", locIdParameter);
        }
    
        public virtual ObjectResult<spGet_ItemHistory_Result> spGet_ItemHistory(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ItemHistory_Result>("spGet_ItemHistory", itemIDParameter);
        }
    
        public virtual ObjectResult<spget_OrderManagerDashboard_Result> spget_OrderManagerDashboard(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> region, Nullable<int> category, Nullable<int> company, Nullable<int> supplier, Nullable<int> pOStatus, Nullable<int> productId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            var supplierParameter = supplier.HasValue ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(int));
    
            var pOStatusParameter = pOStatus.HasValue ?
                new ObjectParameter("POStatus", pOStatus) :
                new ObjectParameter("POStatus", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_OrderManagerDashboard_Result>("spget_OrderManagerDashboard", fromDateParameter, toDateParameter, regionParameter, categoryParameter, companyParameter, supplierParameter, pOStatusParameter, productIdParameter);
        }
    
        public virtual ObjectResult<spRep_StockTypeWise_Result> spRep_StockTypeWise(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_StockTypeWise_Result>("spRep_StockTypeWise", locIdParameter);
        }
    
        public virtual ObjectResult<SpGet_Message_Result> SpGet_Message(Nullable<int> locId, string category, string message)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGet_Message_Result>("SpGet_Message", locIdParameter, categoryParameter, messageParameter);
        }
    
        public virtual ObjectResult<spget_Fin_SubsidaryList_Result> spget_Fin_SubsidaryList(Nullable<long> pId, string str)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(long));
    
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_Fin_SubsidaryList_Result>("spget_Fin_SubsidaryList", pIdParameter, strParameter);
        }
    
        public virtual ObjectResult<spRep_SaleRateList_Result> spRep_SaleRateList(Nullable<int> locId, Nullable<int> comId, Nullable<int> productId, Nullable<int> modelId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("ComId", comId) :
                new ObjectParameter("ComId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_SaleRateList_Result>("spRep_SaleRateList", locIdParameter, comIdParameter, productIdParameter, modelIdParameter);
        }
    
        public virtual ObjectResult<spRep_RecoverOfficerPerSummary_Result> spRep_RecoverOfficerPerSummary(Nullable<System.DateTime> moth, Nullable<int> recId)
        {
            var mothParameter = moth.HasValue ?
                new ObjectParameter("moth", moth) :
                new ObjectParameter("moth", typeof(System.DateTime));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_RecoverOfficerPerSummary_Result>("spRep_RecoverOfficerPerSummary", mothParameter, recIdParameter);
        }
    
        public virtual ObjectResult<spRep_RocoveryOfficerPerformance_Result> spRep_RocoveryOfficerPerformance(Nullable<System.DateTime> fDate, Nullable<System.DateTime> tDate, Nullable<int> locId, string category)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var tDateParameter = tDate.HasValue ?
                new ObjectParameter("TDate", tDate) :
                new ObjectParameter("TDate", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_RocoveryOfficerPerformance_Result>("spRep_RocoveryOfficerPerformance", fDateParameter, tDateParameter, locIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<spDash_TwoMonthSale_Result> spDash_TwoMonthSale(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDash_TwoMonthSale_Result>("spDash_TwoMonthSale", locIdParameter);
        }
    
        public virtual ObjectResult<spDash_TwoYearSale_Result> spDash_TwoYearSale(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDash_TwoYearSale_Result>("spDash_TwoYearSale", locIdParameter);
        }
    
        public virtual ObjectResult<spGet_SKUWiseStockATBranch_Result> spGet_SKUWiseStockATBranch(Nullable<int> locId, Nullable<int> model, Nullable<int> skuId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var modelParameter = model.HasValue ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(int));
    
            var skuIdParameter = skuId.HasValue ?
                new ObjectParameter("SkuId", skuId) :
                new ObjectParameter("SkuId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_SKUWiseStockATBranch_Result>("spGet_SKUWiseStockATBranch", locIdParameter, modelParameter, skuIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spget_Taxable(Nullable<long> transId, string type)
        {
            var transIdParameter = transId.HasValue ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spget_Taxable", transIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<spget_VoucherSearch_Result> spget_VoucherSearch(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string typeId, string vNo, string narration, string code, Nullable<int> pCCode, string chequeNo, string vrStatus, string refDocNo)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeIdParameter = typeId != null ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(string));
    
            var vNoParameter = vNo != null ?
                new ObjectParameter("VNo", vNo) :
                new ObjectParameter("VNo", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var pCCodeParameter = pCCode.HasValue ?
                new ObjectParameter("PCCode", pCCode) :
                new ObjectParameter("PCCode", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var vrStatusParameter = vrStatus != null ?
                new ObjectParameter("VrStatus", vrStatus) :
                new ObjectParameter("VrStatus", typeof(string));
    
            var refDocNoParameter = refDocNo != null ?
                new ObjectParameter("RefDocNo", refDocNo) :
                new ObjectParameter("RefDocNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_VoucherSearch_Result>("spget_VoucherSearch", fromDateParameter, toDateParameter, typeIdParameter, vNoParameter, narrationParameter, codeParameter, pCCodeParameter, chequeNoParameter, vrStatusParameter, refDocNoParameter);
        }
    
        public virtual ObjectResult<spget_GetEmpSalary_Result> spget_GetEmpSalary(Nullable<int> empId, Nullable<System.DateTime> salMonth)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_GetEmpSalary_Result>("spget_GetEmpSalary", empIdParameter, salMonthParameter);
        }
    
        public virtual ObjectResult<spPay_Closing_Voucher_Result> spPay_Closing_Voucher(Nullable<System.DateTime> closingMonth, Nullable<int> locId)
        {
            var closingMonthParameter = closingMonth.HasValue ?
                new ObjectParameter("ClosingMonth", closingMonth) :
                new ObjectParameter("ClosingMonth", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_Closing_Voucher_Result>("spPay_Closing_Voucher", closingMonthParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spPay_Closing_Voucher_Adj_Result> spPay_Closing_Voucher_Adj(Nullable<System.DateTime> closingMonth, Nullable<int> locId)
        {
            var closingMonthParameter = closingMonth.HasValue ?
                new ObjectParameter("ClosingMonth", closingMonth) :
                new ObjectParameter("ClosingMonth", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_Closing_Voucher_Adj_Result>("spPay_Closing_Voucher_Adj", closingMonthParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spPay_Closing_Voucher_Dist_Result> spPay_Closing_Voucher_Dist(Nullable<System.DateTime> closingMonth, Nullable<int> locId)
        {
            var closingMonthParameter = closingMonth.HasValue ?
                new ObjectParameter("ClosingMonth", closingMonth) :
                new ObjectParameter("ClosingMonth", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_Closing_Voucher_Dist_Result>("spPay_Closing_Voucher_Dist", closingMonthParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spget_InvForPayment_Result> spget_InvForPayment(Nullable<int> suppCatId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> suppId, Nullable<int> locId, string status)
        {
            var suppCatIdParameter = suppCatId.HasValue ?
                new ObjectParameter("SuppCatId", suppCatId) :
                new ObjectParameter("SuppCatId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_InvForPayment_Result>("spget_InvForPayment", suppCatIdParameter, fromDateParameter, toDateParameter, suppIdParameter, locIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<spget_FieldDesgList_Result> spget_FieldDesgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_FieldDesgList_Result>("spget_FieldDesgList");
        }
    
        public virtual ObjectResult<spPay_SalaryDisbursementControlPanel_Result> spPay_SalaryDisbursementControlPanel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_SalaryDisbursementControlPanel_Result>("spPay_SalaryDisbursementControlPanel");
        }
    
        public virtual int spPay_SalaryProcess_HO_Final(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_HO_Final", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual ObjectResult<string> sp_PayEmpSalary(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_PayEmpSalary", empIdParameter, salMonthParameter, paidByParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spRep_Installment_V1_Result> spRep_Installment_V1(Nullable<long> instId)
        {
            var instIdParameter = instId.HasValue ?
                new ObjectParameter("InstId", instId) :
                new ObjectParameter("InstId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_Installment_V1_Result>("spRep_Installment_V1", instIdParameter);
        }
    
        public virtual ObjectResult<spget_OutStandForSMS_Result> spget_OutStandForSMS(Nullable<int> locId, string category, string sMS)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var sMSParameter = sMS != null ?
                new ObjectParameter("SMS", sMS) :
                new ObjectParameter("SMS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_OutStandForSMS_Result>("spget_OutStandForSMS", locIdParameter, categoryParameter, sMSParameter);
        }
    
        public virtual ObjectResult<spRep_InstalmentDetail_Result> spRep_InstalmentDetail(Nullable<long> accNo)
        {
            var accNoParameter = accNo.HasValue ?
                new ObjectParameter("AccNo", accNo) :
                new ObjectParameter("AccNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_InstalmentDetail_Result>("spRep_InstalmentDetail", accNoParameter);
        }
    
        public virtual ObjectResult<spRep_AllBranchesDailySale_Result> spRep_AllBranchesDailySale(Nullable<System.DateTime> workingDate)
        {
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_AllBranchesDailySale_Result>("spRep_AllBranchesDailySale", workingDateParameter);
        }
    
        public virtual ObjectResult<spget_AccountSearchAll_Result> spget_AccountSearchAll(Nullable<int> locId, Nullable<int> status, Nullable<int> criteria1, string criteria1Value, Nullable<int> userId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var criteria1Parameter = criteria1.HasValue ?
                new ObjectParameter("Criteria1", criteria1) :
                new ObjectParameter("Criteria1", typeof(int));
    
            var criteria1ValueParameter = criteria1Value != null ?
                new ObjectParameter("Criteria1Value", criteria1Value) :
                new ObjectParameter("Criteria1Value", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_AccountSearchAll_Result>("spget_AccountSearchAll", locIdParameter, statusParameter, criteria1Parameter, criteria1ValueParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spRep_CashClosing_Result> spRep_CashClosing(Nullable<int> locId, Nullable<System.DateTime> workingDate)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_CashClosing_Result>("spRep_CashClosing", locIdParameter, workingDateParameter);
        }
    
        public virtual ObjectResult<spRep_OutstandingReport_Result> spRep_OutstandingReport(Nullable<int> locId, Nullable<System.DateTime> month, string category, string status, string type, Nullable<long> recoveryId, string reportType, Nullable<bool> isProduct, Nullable<bool> isGuarantor, Nullable<bool> isMarketing, Nullable<bool> isAddress, Nullable<bool> isRecInq)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var recoveryIdParameter = recoveryId.HasValue ?
                new ObjectParameter("RecoveryId", recoveryId) :
                new ObjectParameter("RecoveryId", typeof(long));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var isProductParameter = isProduct.HasValue ?
                new ObjectParameter("IsProduct", isProduct) :
                new ObjectParameter("IsProduct", typeof(bool));
    
            var isGuarantorParameter = isGuarantor.HasValue ?
                new ObjectParameter("IsGuarantor", isGuarantor) :
                new ObjectParameter("IsGuarantor", typeof(bool));
    
            var isMarketingParameter = isMarketing.HasValue ?
                new ObjectParameter("IsMarketing", isMarketing) :
                new ObjectParameter("IsMarketing", typeof(bool));
    
            var isAddressParameter = isAddress.HasValue ?
                new ObjectParameter("IsAddress", isAddress) :
                new ObjectParameter("IsAddress", typeof(bool));
    
            var isRecInqParameter = isRecInq.HasValue ?
                new ObjectParameter("IsRecInq", isRecInq) :
                new ObjectParameter("IsRecInq", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_OutstandingReport_Result>("spRep_OutstandingReport", locIdParameter, monthParameter, categoryParameter, statusParameter, typeParameter, recoveryIdParameter, reportTypeParameter, isProductParameter, isGuarantorParameter, isMarketingParameter, isAddressParameter, isRecInqParameter);
        }
    
        public virtual ObjectResult<spRep_RecOffPerfForMobile_Result> spRep_RecOffPerfForMobile(Nullable<System.DateTime> date, Nullable<int> locId, Nullable<int> empId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_RecOffPerfForMobile_Result>("spRep_RecOffPerfForMobile", dateParameter, locIdParameter, empIdParameter);
        }
    
        public virtual ObjectResult<spRep_ExpenseSlip_Result> spRep_ExpenseSlip(Nullable<long> transId)
        {
            var transIdParameter = transId.HasValue ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_ExpenseSlip_Result>("spRep_ExpenseSlip", transIdParameter);
        }
    
        public virtual ObjectResult<spRep_OutstandingReportForMobile_Result> spRep_OutstandingReportForMobile(Nullable<int> locId, Nullable<System.DateTime> month, string category, Nullable<long> recoveryId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var recoveryIdParameter = recoveryId.HasValue ?
                new ObjectParameter("RecoveryId", recoveryId) :
                new ObjectParameter("RecoveryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_OutstandingReportForMobile_Result>("spRep_OutstandingReportForMobile", locIdParameter, monthParameter, categoryParameter, recoveryIdParameter);
        }
    
        public virtual ObjectResult<spRep_CustomerInfo_V1_Result> spRep_CustomerInfo_V1(Nullable<long> accNo)
        {
            var accNoParameter = accNo.HasValue ?
                new ObjectParameter("AccNo", accNo) :
                new ObjectParameter("AccNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_CustomerInfo_V1_Result>("spRep_CustomerInfo_V1", accNoParameter);
        }
    
        public virtual ObjectResult<spRep_CustomerInfo_V1_Lock_Result> spRep_CustomerInfo_V1_Lock(Nullable<long> accNo)
        {
            var accNoParameter = accNo.HasValue ?
                new ObjectParameter("AccNo", accNo) :
                new ObjectParameter("AccNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_CustomerInfo_V1_Lock_Result>("spRep_CustomerInfo_V1_Lock", accNoParameter);
        }
    
        public virtual ObjectResult<string> spPay_EmpSalaryDisbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource, Nullable<int> userId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_EmpSalaryDisbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGet_TemplateForSalary(Nullable<System.DateTime> salMonth, Nullable<int> locId)
        {
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGet_TemplateForSalary", salMonthParameter, locIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spget_Pay_EmpTemplateByLocFace(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spget_Pay_EmpTemplateByLocFace", locIdParameter);
        }
    
        public virtual ObjectResult<spRep_SMSAll_Result> spRep_SMSAll(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_SMSAll_Result>("spRep_SMSAll", cityIdParameter);
        }
    
        public virtual ObjectResult<spget_InstPlan_Result> spget_InstPlan(Nullable<int> sKUId, Nullable<int> locId, Nullable<int> duration, Nullable<long> itemId)
        {
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_InstPlan_Result>("spget_InstPlan", sKUIdParameter, locIdParameter, durationParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetTargetIncentives_4_Approval_Result> spPay_GetTargetIncentives_4_Approval(Nullable<System.DateTime> salaryMonth, Nullable<int> disbursmentTypeId, Nullable<int> cityId)
        {
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(System.DateTime));
    
            var disbursmentTypeIdParameter = disbursmentTypeId.HasValue ?
                new ObjectParameter("DisbursmentTypeId", disbursmentTypeId) :
                new ObjectParameter("DisbursmentTypeId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetTargetIncentives_4_Approval_Result>("spPay_GetTargetIncentives_4_Approval", salaryMonthParameter, disbursmentTypeIdParameter, cityIdParameter);
        }
    
        public virtual ObjectResult<spDASH_LocSaleVsTarget_Result> spDASH_LocSaleVsTarget(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDASH_LocSaleVsTarget_Result>("spDASH_LocSaleVsTarget", empIdParameter);
        }
    
        public virtual int spPay_Get_Advances_For_Disbursement(Nullable<int> hDeptId, Nullable<int> deptId, Nullable<int> desgId)
        {
            var hDeptIdParameter = hDeptId.HasValue ?
                new ObjectParameter("HDeptId", hDeptId) :
                new ObjectParameter("HDeptId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var desgIdParameter = desgId.HasValue ?
                new ObjectParameter("DesgId", desgId) :
                new ObjectParameter("DesgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_Get_Advances_For_Disbursement", hDeptIdParameter, deptIdParameter, desgIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpAdvance_4_Disbursement_Result> spPay_GetEmpAdvance_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpAdvance_4_Disbursement_Result>("spPay_GetEmpAdvance_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpIncentives_4_Disbursement_Result> spPay_GetEmpIncentives_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpIncentives_4_Disbursement_Result>("spPay_GetEmpIncentives_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<string> spPay_EmpTargetInc_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_EmpTargetInc_Disbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpSalary_4_Disbursement_Result> spPay_GetEmpSalary_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpSalary_4_Disbursement_Result>("spPay_GetEmpSalary_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<spRep_Sale_Result> spRep_Sale(Nullable<long> transId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productId, Nullable<int> companyId, Nullable<int> modelId, Nullable<int> typeId, Nullable<int> cityId, Nullable<int> locId, string saleType)
        {
            var transIdParameter = transId.HasValue ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var saleTypeParameter = saleType != null ?
                new ObjectParameter("SaleType", saleType) :
                new ObjectParameter("SaleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_Sale_Result>("spRep_Sale", transIdParameter, fromDateParameter, toDateParameter, productIdParameter, companyIdParameter, modelIdParameter, typeIdParameter, cityIdParameter, locIdParameter, saleTypeParameter);
        }
    
        public virtual ObjectResult<spget_MarkAttendance_Result> spget_MarkAttendance(Nullable<long> cardNo, Nullable<int> shopId, Nullable<int> userId, string ipAddress, string attnType, Nullable<decimal> lat, Nullable<decimal> lng)
        {
            var cardNoParameter = cardNo.HasValue ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(long));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var attnTypeParameter = attnType != null ?
                new ObjectParameter("AttnType", attnType) :
                new ObjectParameter("AttnType", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_MarkAttendance_Result>("spget_MarkAttendance", cardNoParameter, shopIdParameter, userIdParameter, ipAddressParameter, attnTypeParameter, latParameter, lngParameter);
        }
    
        public virtual ObjectResult<spPay_GetData_4_Bank_Letter_Result> spPay_GetData_4_Bank_Letter(Nullable<System.DateTime> salaryMonth, Nullable<int> hDeptId, Nullable<int> deptId, Nullable<int> cityId, Nullable<int> desgId, string empStatus, Nullable<decimal> fromSalary, Nullable<decimal> toSalary)
        {
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(System.DateTime));
    
            var hDeptIdParameter = hDeptId.HasValue ?
                new ObjectParameter("HDeptId", hDeptId) :
                new ObjectParameter("HDeptId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var desgIdParameter = desgId.HasValue ?
                new ObjectParameter("DesgId", desgId) :
                new ObjectParameter("DesgId", typeof(int));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var fromSalaryParameter = fromSalary.HasValue ?
                new ObjectParameter("FromSalary", fromSalary) :
                new ObjectParameter("FromSalary", typeof(decimal));
    
            var toSalaryParameter = toSalary.HasValue ?
                new ObjectParameter("ToSalary", toSalary) :
                new ObjectParameter("ToSalary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetData_4_Bank_Letter_Result>("spPay_GetData_4_Bank_Letter", salaryMonthParameter, hDeptIdParameter, deptIdParameter, cityIdParameter, desgIdParameter, empStatusParameter, fromSalaryParameter, toSalaryParameter);
        }
    
        public virtual ObjectResult<string> spPay_SalaryAdvanceDisbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_SalaryAdvanceDisbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<spRep_EmployeePerf_V1_Result> spRep_EmployeePerf_V1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_EmployeePerf_V1_Result>("spRep_EmployeePerf_V1", fromDateParameter, toDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spget_AccSearchByInqMktMgr_Result> spget_AccSearchByInqMktMgr(Nullable<int> locId, Nullable<System.DateTime> fDate, Nullable<System.DateTime> tDate, Nullable<int> reportType, Nullable<int> empId, Nullable<int> status)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var tDateParameter = tDate.HasValue ?
                new ObjectParameter("TDate", tDate) :
                new ObjectParameter("TDate", typeof(System.DateTime));
    
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_AccSearchByInqMktMgr_Result>("spget_AccSearchByInqMktMgr", locIdParameter, fDateParameter, tDateParameter, reportTypeParameter, empIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<spget_InstPlanExtraAdvance_Result> spget_InstPlanExtraAdvance(Nullable<int> locId, Nullable<int> sKUId, Nullable<decimal> advance, Nullable<decimal> pPrice, Nullable<int> policyId, Nullable<bool> isLocal)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var pPriceParameter = pPrice.HasValue ?
                new ObjectParameter("PPrice", pPrice) :
                new ObjectParameter("PPrice", typeof(decimal));
    
            var policyIdParameter = policyId.HasValue ?
                new ObjectParameter("PolicyId", policyId) :
                new ObjectParameter("PolicyId", typeof(int));
    
            var isLocalParameter = isLocal.HasValue ?
                new ObjectParameter("IsLocal", isLocal) :
                new ObjectParameter("IsLocal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_InstPlanExtraAdvance_Result>("spget_InstPlanExtraAdvance", locIdParameter, sKUIdParameter, advanceParameter, pPriceParameter, policyIdParameter, isLocalParameter);
        }
    
        public virtual ObjectResult<spget_GRNForInv_Result> spget_GRNForInv(Nullable<int> suppCatId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> suppId, Nullable<int> cityId, Nullable<int> locId, string status)
        {
            var suppCatIdParameter = suppCatId.HasValue ?
                new ObjectParameter("SuppCatId", suppCatId) :
                new ObjectParameter("SuppCatId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_GRNForInv_Result>("spget_GRNForInv", suppCatIdParameter, fromDateParameter, toDateParameter, suppIdParameter, cityIdParameter, locIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<spRep_POSummary_Result> spRep_POSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productId, Nullable<int> companyId, Nullable<int> modelId, Nullable<int> typeId, Nullable<int> suppId, Nullable<int> suppCatId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var suppCatIdParameter = suppCatId.HasValue ?
                new ObjectParameter("SuppCatId", suppCatId) :
                new ObjectParameter("SuppCatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_POSummary_Result>("spRep_POSummary", fromDateParameter, toDateParameter, productIdParameter, companyIdParameter, modelIdParameter, typeIdParameter, suppIdParameter, suppCatIdParameter);
        }
    
        public virtual ObjectResult<spget_BSDesgList_Result> spget_BSDesgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_BSDesgList_Result>("spget_BSDesgList");
        }
    
        public virtual ObjectResult<spRep_SalemanWiseCashSaleSummary_Result> spRep_SalemanWiseCashSaleSummary(Nullable<int> locId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_SalemanWiseCashSaleSummary_Result>("spRep_SalemanWiseCashSaleSummary", locIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> spPay_EmpZakat_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_EmpZakat_Disbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpZakat_4_Disbursement_Result> spPay_GetEmpZakat_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpZakat_4_Disbursement_Result>("spPay_GetEmpZakat_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<spRep_ChatList_Result> spRep_ChatList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_ChatList_Result>("spRep_ChatList", userIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpIftari_4_Disbursement_Result> spPay_GetEmpIftari_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpIftari_4_Disbursement_Result>("spPay_GetEmpIftari_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<spget_PaymentAdvice_Result> spget_PaymentAdvice(Nullable<bool> reg, Nullable<long> accId)
        {
            var regParameter = reg.HasValue ?
                new ObjectParameter("Reg", reg) :
                new ObjectParameter("Reg", typeof(bool));
    
            var accIdParameter = accId.HasValue ?
                new ObjectParameter("AccId", accId) :
                new ObjectParameter("AccId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_PaymentAdvice_Result>("spget_PaymentAdvice", regParameter, accIdParameter);
        }
    
        public virtual ObjectResult<string> spPay_EmpIftari_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_EmpIftari_Disbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spget_SKUCashRate(Nullable<int> locId, Nullable<int> sKUId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spget_SKUCashRate", locIdParameter, sKUIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetProductIncentiveDetail_Result> spPay_GetProductIncentiveDetail(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetProductIncentiveDetail_Result>("spPay_GetProductIncentiveDetail", processIdParameter);
        }
    
        public virtual int spProductIncentiveCalc(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cityId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProductIncentiveCalc", fromDateParameter, toDateParameter, cityIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spget_SupplierBalance(Nullable<long> accId, Nullable<int> suppId)
        {
            var accIdParameter = accId.HasValue ?
                new ObjectParameter("AccId", accId) :
                new ObjectParameter("AccId", typeof(long));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spget_SupplierBalance", accIdParameter, suppIdParameter);
        }
    
        public virtual int spPay_UpdateEmpHierarchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_UpdateEmpHierarchy");
        }
    
        public virtual int spPay_SalaryProcess_Field_Final(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_Field_Final", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual int spPay_SalaryProcess_Field_Test(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_Field_Test", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual int spPay_SalaryProcess_Showrooms_Final(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_Showrooms_Final", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpProdIncentives_4_Disbursement_Result> spPay_GetEmpProdIncentives_4_Disbursement(Nullable<int> empId, Nullable<int> disbursementTypeId, Nullable<int> periodId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpProdIncentives_4_Disbursement_Result>("spPay_GetEmpProdIncentives_4_Disbursement", empIdParameter, disbursementTypeIdParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<spget_InstPlan_V1_Result> spget_InstPlan_V1(Nullable<int> sKUId, Nullable<int> locId, Nullable<int> duration, Nullable<long> itemId)
        {
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spget_InstPlan_V1_Result>("spget_InstPlan_V1", sKUIdParameter, locIdParameter, durationParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetProductIncApproval_Result> spPay_GetProductIncApproval(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> cityId)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetProductIncApproval_Result>("spPay_GetProductIncApproval", fromParameter, toParameter, cityIdParameter);
        }
    
        public virtual int spPay_Post_Branch_Closing_Voucher(Nullable<System.DateTime> closingMonth, Nullable<int> branchId, Nullable<int> userId)
        {
            var closingMonthParameter = closingMonth.HasValue ?
                new ObjectParameter("ClosingMonth", closingMonth) :
                new ObjectParameter("ClosingMonth", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_Post_Branch_Closing_Voucher", closingMonthParameter, branchIdParameter, userIdParameter);
        }
    
        public virtual int spPay_Post_Product_Incentives(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cityId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_Post_Product_Incentives", fromDateParameter, toDateParameter, cityIdParameter, userIdParameter);
        }
    
        public virtual int spPay_Post_Target_Incentives(Nullable<System.DateTime> targetMonth, Nullable<int> userId, Nullable<int> tIType)
        {
            var targetMonthParameter = targetMonth.HasValue ?
                new ObjectParameter("TargetMonth", targetMonth) :
                new ObjectParameter("TargetMonth", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tITypeParameter = tIType.HasValue ?
                new ObjectParameter("TIType", tIType) :
                new ObjectParameter("TIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_Post_Target_Incentives", targetMonthParameter, userIdParameter, tITypeParameter);
        }
    
        public virtual ObjectResult<spPay_Branches_Month_Closing_Summary_Result> spPay_Branches_Month_Closing_Summary(Nullable<System.DateTime> closingMonth, Nullable<int> cityId, Nullable<int> locId)
        {
            var closingMonthParameter = closingMonth.HasValue ?
                new ObjectParameter("ClosingMonth", closingMonth) :
                new ObjectParameter("ClosingMonth", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_Branches_Month_Closing_Summary_Result>("spPay_Branches_Month_Closing_Summary", closingMonthParameter, cityIdParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spGet_BikeLetterSale_Result> spGet_BikeLetterSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cityId, Nullable<int> locId, Nullable<int> typeId, Nullable<int> sKUId, Nullable<int> suppId, string saleType, string serialNo, string billNo)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var sKUIdParameter = sKUId.HasValue ?
                new ObjectParameter("SKUId", sKUId) :
                new ObjectParameter("SKUId", typeof(int));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var saleTypeParameter = saleType != null ?
                new ObjectParameter("SaleType", saleType) :
                new ObjectParameter("SaleType", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_BikeLetterSale_Result>("spGet_BikeLetterSale", fromDateParameter, toDateParameter, cityIdParameter, locIdParameter, typeIdParameter, sKUIdParameter, suppIdParameter, saleTypeParameter, serialNoParameter, billNoParameter);
        }
    
        public virtual int spPay_ProcessManualHolidays(Nullable<int> rowId)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_ProcessManualHolidays", rowIdParameter);
        }
    
        public virtual int spPay_SalaryProcess_Showrooms_Test(Nullable<System.DateTime> pSalaryMonth, Nullable<int> pHDeptId, Nullable<int> pUserId)
        {
            var pSalaryMonthParameter = pSalaryMonth.HasValue ?
                new ObjectParameter("pSalaryMonth", pSalaryMonth) :
                new ObjectParameter("pSalaryMonth", typeof(System.DateTime));
    
            var pHDeptIdParameter = pHDeptId.HasValue ?
                new ObjectParameter("pHDeptId", pHDeptId) :
                new ObjectParameter("pHDeptId", typeof(int));
    
            var pUserIdParameter = pUserId.HasValue ?
                new ObjectParameter("pUserId", pUserId) :
                new ObjectParameter("pUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_SalaryProcess_Showrooms_Test", pSalaryMonthParameter, pHDeptIdParameter, pUserIdParameter);
        }
    
        public virtual ObjectResult<spGet_BikeLetter_Result> spGet_BikeLetter(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> suppId, Nullable<int> typeId, string serialNo, string doNo, Nullable<int> isYes)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var doNoParameter = doNo != null ?
                new ObjectParameter("DoNo", doNo) :
                new ObjectParameter("DoNo", typeof(string));
    
            var isYesParameter = isYes.HasValue ?
                new ObjectParameter("IsYes", isYes) :
                new ObjectParameter("IsYes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_BikeLetter_Result>("spGet_BikeLetter", fromDateParameter, toDateParameter, suppIdParameter, typeIdParameter, serialNoParameter, doNoParameter, isYesParameter);
        }
    
        public virtual ObjectResult<spPay_GetData_4_Bank_Letter_Uploader_Result> spPay_GetData_4_Bank_Letter_Uploader(Nullable<System.DateTime> salaryMonth, string empIds)
        {
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(System.DateTime));
    
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetData_4_Bank_Letter_Uploader_Result>("spPay_GetData_4_Bank_Letter_Uploader", salaryMonthParameter, empIdsParameter);
        }
    
        public virtual ObjectResult<string> spPay_ProductIncentiveDisbursement(Nullable<int> empId, Nullable<int> periodId, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource, Nullable<int> userId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(int));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_ProductIncentiveDisbursement", empIdParameter, periodIdParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGet_ProcessingList_Result> spGet_ProcessingList(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ProcessingList_Result>("spGet_ProcessingList", locIdParameter);
        }
    
        public virtual ObjectResult<spGetDonationsForApproval_Result> spGetDonationsForApproval(Nullable<System.DateTime> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDonationsForApproval_Result>("spGetDonationsForApproval", monthParameter);
        }
    
        public virtual ObjectResult<spGet_BranchLeaves_Result> spGet_BranchLeaves(Nullable<int> empId, Nullable<int> locId, Nullable<System.DateTime> date)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_BranchLeaves_Result>("spGet_BranchLeaves", empIdParameter, locIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spRep_DayCloseingCash_Result> spRep_DayCloseingCash(Nullable<int> locId, Nullable<System.DateTime> workingDate)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_DayCloseingCash_Result>("spRep_DayCloseingCash", locIdParameter, workingDateParameter);
        }
    
        public virtual ObjectResult<spRep_Pay_DailyAttendanceMobile_Result> spRep_Pay_DailyAttendanceMobile(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_Pay_DailyAttendanceMobile_Result>("spRep_Pay_DailyAttendanceMobile", empIdParameter);
        }
    
        public virtual ObjectResult<spRep_Pay_DailyBranchAttendanceMobile_Result> spRep_Pay_DailyBranchAttendanceMobile(Nullable<int> deptId)
        {
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRep_Pay_DailyBranchAttendanceMobile_Result>("spRep_Pay_DailyBranchAttendanceMobile", deptIdParameter);
        }
    
        public virtual ObjectResult<spDash_CashInHand_Result> spDash_CashInHand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDash_CashInHand_Result>("spDash_CashInHand");
        }
    
        public virtual ObjectResult<spGet_CashRiskAlert_Result> spGet_CashRiskAlert(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_CashRiskAlert_Result>("spGet_CashRiskAlert", locIdParameter);
        }
    
        public virtual ObjectResult<string> spPay_Post_CharityDonation(Nullable<long> cDDtlId)
        {
            var cDDtlIdParameter = cDDtlId.HasValue ?
                new ObjectParameter("CDDtlId", cDDtlId) :
                new ObjectParameter("CDDtlId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_Post_CharityDonation", cDDtlIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetRMIncentives_4_Disbursement_Result> spPay_GetRMIncentives_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetRMIncentives_4_Disbursement_Result>("spPay_GetRMIncentives_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<spPay_GetEmpGeneralPayment_4_Disbursement_Result> spPay_GetEmpGeneralPayment_4_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> disbursementTypeId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_GetEmpGeneralPayment_4_Disbursement_Result>("spPay_GetEmpGeneralPayment_4_Disbursement", empIdParameter, salMonthParameter, disbursementTypeIdParameter);
        }
    
        public virtual ObjectResult<string> spPay_EmpGeneralPayment_Disbursement(Nullable<int> empId, Nullable<System.DateTime> salMonth, Nullable<int> paidBy, Nullable<int> locId, Nullable<int> disbursementTypeId, string disbursementSource)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salMonthParameter = salMonth.HasValue ?
                new ObjectParameter("SalMonth", salMonth) :
                new ObjectParameter("SalMonth", typeof(System.DateTime));
    
            var paidByParameter = paidBy.HasValue ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            var disbursementTypeIdParameter = disbursementTypeId.HasValue ?
                new ObjectParameter("DisbursementTypeId", disbursementTypeId) :
                new ObjectParameter("DisbursementTypeId", typeof(int));
    
            var disbursementSourceParameter = disbursementSource != null ?
                new ObjectParameter("DisbursementSource", disbursementSource) :
                new ObjectParameter("DisbursementSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_EmpGeneralPayment_Disbursement", empIdParameter, salMonthParameter, paidByParameter, locIdParameter, disbursementTypeIdParameter, disbursementSourceParameter);
        }
    
        public virtual ObjectResult<spPay_CRCFines_Result> spPay_CRCFines(Nullable<int> userId, Nullable<int> locId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPay_CRCFines_Result>("spPay_CRCFines", userIdParameter, locIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spFin_BackendIncCalc(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> policyId, Nullable<int> regionId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var policyIdParameter = policyId.HasValue ?
                new ObjectParameter("PolicyId", policyId) :
                new ObjectParameter("PolicyId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spFin_BackendIncCalc", fromDateParameter, toDateParameter, policyIdParameter, regionIdParameter, userIdParameter);
        }
    
        public virtual int spPay_CharityDonation_Process(Nullable<System.DateTime> month, Nullable<int> userId, string processType)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var processTypeParameter = processType != null ?
                new ObjectParameter("ProcessType", processType) :
                new ObjectParameter("ProcessType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPay_CharityDonation_Process", monthParameter, userIdParameter, processTypeParameter);
        }
    
        public virtual ObjectResult<spGet_EmpForFine_Result> spGet_EmpForFine(Nullable<long> accNo, Nullable<int> policyId, Nullable<int> locId)
        {
            var accNoParameter = accNo.HasValue ?
                new ObjectParameter("AccNo", accNo) :
                new ObjectParameter("AccNo", typeof(long));
    
            var policyIdParameter = policyId.HasValue ?
                new ObjectParameter("PolicyId", policyId) :
                new ObjectParameter("PolicyId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_EmpForFine_Result>("spGet_EmpForFine", accNoParameter, policyIdParameter, locIdParameter);
        }
    
        public virtual ObjectResult<string> spPay_Post_Bank_Salary(Nullable<int> bLId, string bankAC, Nullable<int> userId, Nullable<System.DateTime> postingDate)
        {
            var bLIdParameter = bLId.HasValue ?
                new ObjectParameter("BLId", bLId) :
                new ObjectParameter("BLId", typeof(int));
    
            var bankACParameter = bankAC != null ?
                new ObjectParameter("BankAC", bankAC) :
                new ObjectParameter("BankAC", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spPay_Post_Bank_Salary", bLIdParameter, bankACParameter, userIdParameter, postingDateParameter);
        }
    }
}
